
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  000010cc  00001160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000063  0080018e  0080018e  000011ee  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  000011ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000008e2  00000000  00000000  0000126e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ba6  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cf  00000000  00000000  000036f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b06  00000000  00000000  00003dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005e0  00000000  00000000  000058cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009e0  00000000  00000000  00005eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c48  00000000  00000000  0000688c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000074d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 e5 06 	jmp	0xdca	; 0xdca <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ec       	ldi	r30, 0xCC	; 204
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ae 38       	cpi	r26, 0x8E	; 142
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	ae e8       	ldi	r26, 0x8E	; 142
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 3f       	cpi	r26, 0xF1	; 241
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "uart.h"




int main(void){
      a6:	ff 92       	push	r15
      a8:	0f 93       	push	r16
      aa:	1f 93       	push	r17
      ac:	cf 93       	push	r28
      ae:	df 93       	push	r29

  WS2812B_Init();
      b0:	0e 94 ba 02 	call	0x574	; 0x574 <WS2812B_Init>
  UART_Init(9600);
      b4:	60 e8       	ldi	r22, 0x80	; 128
      b6:	75 e2       	ldi	r23, 0x25	; 37
      b8:	80 e0       	ldi	r24, 0x00	; 0
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	0e 94 cf 07 	call	0xf9e	; 0xf9e <UART_Init>
  UART_Tx_Text_NL("Debug Started");
      c0:	80 e0       	ldi	r24, 0x00	; 0
      c2:	91 e0       	ldi	r25, 0x01	; 1
      c4:	0e 94 c9 03 	call	0x792	; 0x792 <UART_Tx_Text_NL>
  DDRD |= (1<<4);
      c8:	54 9a       	sbi	0x0a, 4	; 10
  PORTD&=~(1<<4);
      ca:	5c 98       	cbi	0x0b, 4	; 11
      cc:	ff 24       	eor	r15, r15
  uint8_t  cmd = 0;
  uint16_t intensity = 0;
  
  while(1){
    
	if(UART_Data_Available()){
      ce:	0e 94 44 06 	call	0xc88	; 0xc88 <UART_Data_Available>
      d2:	88 23       	and	r24, r24
      d4:	09 f4       	brne	.+2      	; 0xd8 <main+0x32>
      d6:	6a c0       	rjmp	.+212    	; 0x1ac <main+0x106>
	  PORTD|= (1<<4);
      d8:	5c 9a       	sbi	0x0b, 4	; 11
      da:	c0 e0       	ldi	r28, 0x00	; 0
      dc:	d0 e0       	ldi	r29, 0x00	; 0
	  for(uint8_t i=0;i<6;i++){
	    DataHandler_Buf_Assign(UART_Buf_Get(i), i) ;
      de:	ce 01       	movw	r24, r28
      e0:	0e 94 3a 06 	call	0xc74	; 0xc74 <UART_Buf_Get>
      e4:	6c 2f       	mov	r22, r28
      e6:	0e 94 21 08 	call	0x1042	; 0x1042 <DataHandler_Buf_Assign>
      ea:	21 96       	adiw	r28, 0x01	; 1
  
  while(1){
    
	if(UART_Data_Available()){
	  PORTD|= (1<<4);
	  for(uint8_t i=0;i<6;i++){
      ec:	c6 30       	cpi	r28, 0x06	; 6
      ee:	d1 05       	cpc	r29, r1
      f0:	b1 f7       	brne	.-20     	; 0xde <main+0x38>
	    DataHandler_Buf_Assign(UART_Buf_Get(i), i) ;
	  }
	  UART_Data_Print_Buf();
      f2:	0e 94 8a 06 	call	0xd14	; 0xd14 <UART_Data_Print_Buf>
	  UART_RX_Packet_Read_Complete();
      f6:	0e 94 bc 07 	call	0xf78	; 0xf78 <UART_RX_Packet_Read_Complete>
	  if(DataHandler_Buf_Get(1) == ':'){
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	0e 94 29 08 	call	0x1052	; 0x1052 <DataHandler_Buf_Get>
     100:	8a 33       	cpi	r24, 0x3A	; 58
     102:	09 f0       	breq	.+2      	; 0x106 <main+0x60>
     104:	4f c0       	rjmp	.+158    	; 0x1a4 <main+0xfe>
	  
	    cmd = DataHandler_Buf_Get(0);
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	0e 94 29 08 	call	0x1052	; 0x1052 <DataHandler_Buf_Get>
     10c:	f8 2e       	mov	r15, r24
		intensity = DataHandler_Char_To_Dec(DataHandler_Buf_Get(2));
     10e:	82 e0       	ldi	r24, 0x02	; 2
     110:	0e 94 29 08 	call	0x1052	; 0x1052 <DataHandler_Buf_Get>
     114:	0e 94 33 08 	call	0x1066	; 0x1066 <DataHandler_Char_To_Dec>
		intensity*= 10;
     118:	28 2f       	mov	r18, r24
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	89 01       	movw	r16, r18
     11e:	53 e0       	ldi	r21, 0x03	; 3
     120:	00 0f       	add	r16, r16
     122:	11 1f       	adc	r17, r17
     124:	5a 95       	dec	r21
     126:	e1 f7       	brne	.-8      	; 0x120 <main+0x7a>
     128:	22 0f       	add	r18, r18
     12a:	33 1f       	adc	r19, r19
     12c:	02 0f       	add	r16, r18
     12e:	13 1f       	adc	r17, r19
		intensity+= DataHandler_Char_To_Dec(DataHandler_Buf_Get(3));
     130:	83 e0       	ldi	r24, 0x03	; 3
     132:	0e 94 29 08 	call	0x1052	; 0x1052 <DataHandler_Buf_Get>
     136:	0e 94 33 08 	call	0x1066	; 0x1066 <DataHandler_Char_To_Dec>
     13a:	08 0f       	add	r16, r24
     13c:	11 1d       	adc	r17, r1
		intensity*= 10;
     13e:	e8 01       	movw	r28, r16
     140:	93 e0       	ldi	r25, 0x03	; 3
     142:	cc 0f       	add	r28, r28
     144:	dd 1f       	adc	r29, r29
     146:	9a 95       	dec	r25
     148:	e1 f7       	brne	.-8      	; 0x142 <main+0x9c>
     14a:	00 0f       	add	r16, r16
     14c:	11 1f       	adc	r17, r17
     14e:	c0 0f       	add	r28, r16
     150:	d1 1f       	adc	r29, r17
		intensity+= DataHandler_Char_To_Dec(DataHandler_Buf_Get(4));
     152:	84 e0       	ldi	r24, 0x04	; 4
     154:	0e 94 29 08 	call	0x1052	; 0x1052 <DataHandler_Buf_Get>
     158:	0e 94 33 08 	call	0x1066	; 0x1066 <DataHandler_Char_To_Dec>
     15c:	c8 0f       	add	r28, r24
     15e:	d1 1d       	adc	r29, r1
		
		if(intensity > 255){
     160:	cf 3f       	cpi	r28, 0xFF	; 255
     162:	d1 05       	cpc	r29, r1
     164:	09 f0       	breq	.+2      	; 0x168 <main+0xc2>
     166:	f0 f4       	brcc	.+60     	; 0x1a4 <main+0xfe>
		  intensity = 0;
		  cmd = 0;
		}
		
		else{
		  WS2812B_Set_Max_Intensity(intensity);
     168:	8c 2f       	mov	r24, r28
     16a:	0e 94 b7 02 	call	0x56e	; 0x56e <WS2812B_Set_Max_Intensity>
		  UART_Tx_Text_SP("CMD");
     16e:	8e e0       	ldi	r24, 0x0E	; 14
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	0e 94 ce 03 	call	0x79c	; 0x79c <UART_Tx_Text_SP>
		  UART_Tx_Byte(cmd);
     176:	8f 2d       	mov	r24, r15
     178:	0e 94 28 03 	call	0x650	; 0x650 <UART_Tx_Byte>
		  UART_Tx_NL();
     17c:	0e 94 99 03 	call	0x732	; 0x732 <UART_Tx_NL>
		  UART_Tx_Parameter_NL("CMD_Intensity", intensity);
     180:	ae 01       	movw	r20, r28
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	82 e1       	ldi	r24, 0x12	; 18
     188:	91 e0       	ldi	r25, 0x01	; 1
     18a:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_Tx_Parameter_NL>
		  UART_Tx_Parameter_NL("ACT_Intensity", WS2812B_Get_Max_Intensity());
     18e:	0e 94 b4 02 	call	0x568	; 0x568 <WS2812B_Get_Max_Intensity>
     192:	48 2f       	mov	r20, r24
     194:	50 e0       	ldi	r21, 0x00	; 0
     196:	60 e0       	ldi	r22, 0x00	; 0
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	80 e2       	ldi	r24, 0x20	; 32
     19c:	91 e0       	ldi	r25, 0x01	; 1
     19e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_Tx_Parameter_NL>
     1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <main+0x100>
     1a4:	ff 24       	eor	r15, r15
	  else{
	    intensity = 0;
		cmd = 0;
	  }
	  
	  DataHandler_Buf_Flush();
     1a6:	0e 94 18 08 	call	0x1030	; 0x1030 <DataHandler_Buf_Flush>
	  
	  PORTD&=~(1<<4);
     1aa:	5c 98       	cbi	0x0b, 4	; 11
	}
	
	
	
	
	if((cmd == 'R') ||(cmd == 'r') ){
     1ac:	82 e5       	ldi	r24, 0x52	; 82
     1ae:	f8 16       	cp	r15, r24
     1b0:	19 f0       	breq	.+6      	; 0x1b8 <main+0x112>
     1b2:	82 e7       	ldi	r24, 0x72	; 114
     1b4:	f8 16       	cp	r15, r24
     1b6:	79 f4       	brne	.+30     	; 0x1d6 <main+0x130>
	  WS2812B_send_rgb_Target(128,0,0);
     1b8:	80 e8       	ldi	r24, 0x80	; 128
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	40 e0       	ldi	r20, 0x00	; 0
     1be:	0e 94 4a 02 	call	0x494	; 0x494 <WS2812B_send_rgb_Target>
	  PORTD|= (1<<4);
     1c2:	5c 9a       	sbi	0x0b, 4	; 11
	  UART_Tx_Parameter_NL("Executed RED", WS2812B_Get_Max_Intensity());
     1c4:	0e 94 b4 02 	call	0x568	; 0x568 <WS2812B_Get_Max_Intensity>
     1c8:	48 2f       	mov	r20, r24
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	60 e0       	ldi	r22, 0x00	; 0
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	8e e2       	ldi	r24, 0x2E	; 46
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	68 c0       	rjmp	.+208    	; 0x2a6 <main+0x200>
	  cmd = 0;
	  PORTD&=~(1<<4);
	}
		
		
	else if((cmd == 'I') || (cmd == 'i')){
     1d6:	89 e4       	ldi	r24, 0x49	; 73
     1d8:	f8 16       	cp	r15, r24
     1da:	19 f0       	breq	.+6      	; 0x1e2 <main+0x13c>
     1dc:	89 e6       	ldi	r24, 0x69	; 105
     1de:	f8 16       	cp	r15, r24
     1e0:	79 f4       	brne	.+30     	; 0x200 <main+0x15a>
	  WS2812B_send_rgb_Target(0,128,128);
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	60 e8       	ldi	r22, 0x80	; 128
     1e6:	40 e8       	ldi	r20, 0x80	; 128
     1e8:	0e 94 4a 02 	call	0x494	; 0x494 <WS2812B_send_rgb_Target>
	  PORTD|= (1<<4);
     1ec:	5c 9a       	sbi	0x0b, 4	; 11
	  UART_Tx_Parameter_NL("Executed ICE Blue", WS2812B_Get_Max_Intensity());
     1ee:	0e 94 b4 02 	call	0x568	; 0x568 <WS2812B_Get_Max_Intensity>
     1f2:	48 2f       	mov	r20, r24
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	70 e0       	ldi	r23, 0x00	; 0
     1fa:	8b e3       	ldi	r24, 0x3B	; 59
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	53 c0       	rjmp	.+166    	; 0x2a6 <main+0x200>
	  cmd = 0;
	  PORTD&=~(1<<4);
	}
		
		
	else if((cmd == 'O')  || (cmd == 'o')){
     200:	8f e4       	ldi	r24, 0x4F	; 79
     202:	f8 16       	cp	r15, r24
     204:	19 f0       	breq	.+6      	; 0x20c <main+0x166>
     206:	8f e6       	ldi	r24, 0x6F	; 111
     208:	f8 16       	cp	r15, r24
     20a:	79 f4       	brne	.+30     	; 0x22a <main+0x184>
	  PORTD|= (1<<4);
     20c:	5c 9a       	sbi	0x0b, 4	; 11
	  WS2812B_send_rgb_Target(0,0,0);
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	40 e0       	ldi	r20, 0x00	; 0
     214:	0e 94 4a 02 	call	0x494	; 0x494 <WS2812B_send_rgb_Target>
	  UART_Tx_Parameter_NL("Executed Off", WS2812B_Get_Max_Intensity());
     218:	0e 94 b4 02 	call	0x568	; 0x568 <WS2812B_Get_Max_Intensity>
     21c:	48 2f       	mov	r20, r24
     21e:	50 e0       	ldi	r21, 0x00	; 0
     220:	60 e0       	ldi	r22, 0x00	; 0
     222:	70 e0       	ldi	r23, 0x00	; 0
     224:	8d e4       	ldi	r24, 0x4D	; 77
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	3e c0       	rjmp	.+124    	; 0x2a6 <main+0x200>
	  cmd = 0;
	  PORTD&=~(1<<4);
	}
		
		
	else if((cmd == 'G')  || (cmd == 'g')){
     22a:	87 e4       	ldi	r24, 0x47	; 71
     22c:	f8 16       	cp	r15, r24
     22e:	19 f0       	breq	.+6      	; 0x236 <main+0x190>
     230:	87 e6       	ldi	r24, 0x67	; 103
     232:	f8 16       	cp	r15, r24
     234:	79 f4       	brne	.+30     	; 0x254 <main+0x1ae>
	  PORTD|= (1<<4);
     236:	5c 9a       	sbi	0x0b, 4	; 11
	  WS2812B_send_rgb_Target(0,128,0);
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	60 e8       	ldi	r22, 0x80	; 128
     23c:	40 e0       	ldi	r20, 0x00	; 0
     23e:	0e 94 4a 02 	call	0x494	; 0x494 <WS2812B_send_rgb_Target>
	  UART_Tx_Parameter_NL("Executed Green", WS2812B_Get_Max_Intensity());
     242:	0e 94 b4 02 	call	0x568	; 0x568 <WS2812B_Get_Max_Intensity>
     246:	48 2f       	mov	r20, r24
     248:	50 e0       	ldi	r21, 0x00	; 0
     24a:	60 e0       	ldi	r22, 0x00	; 0
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	8a e5       	ldi	r24, 0x5A	; 90
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	29 c0       	rjmp	.+82     	; 0x2a6 <main+0x200>
	  cmd = 0;
	  PORTD&=~(1<<4);
	}
		
		
	else if((cmd == 'B')  || (cmd == 'b')){
     254:	82 e4       	ldi	r24, 0x42	; 66
     256:	f8 16       	cp	r15, r24
     258:	19 f0       	breq	.+6      	; 0x260 <main+0x1ba>
     25a:	82 e6       	ldi	r24, 0x62	; 98
     25c:	f8 16       	cp	r15, r24
     25e:	79 f4       	brne	.+30     	; 0x27e <main+0x1d8>
	  PORTD|= (1<<4);
     260:	5c 9a       	sbi	0x0b, 4	; 11
	  WS2812B_send_rgb_Target(0,0,128);
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	40 e8       	ldi	r20, 0x80	; 128
     268:	0e 94 4a 02 	call	0x494	; 0x494 <WS2812B_send_rgb_Target>
	  UART_Tx_Parameter_NL("Executed Blue", WS2812B_Get_Max_Intensity());
     26c:	0e 94 b4 02 	call	0x568	; 0x568 <WS2812B_Get_Max_Intensity>
     270:	48 2f       	mov	r20, r24
     272:	50 e0       	ldi	r21, 0x00	; 0
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	89 e6       	ldi	r24, 0x69	; 105
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	14 c0       	rjmp	.+40     	; 0x2a6 <main+0x200>
	  DataHandler_Buf_Flush();
	  cmd = 0;
	  PORTD&=~(1<<4);
	}
	
	else if((cmd == 'P')  || (cmd == 'p')){
     27e:	80 e5       	ldi	r24, 0x50	; 80
     280:	f8 16       	cp	r15, r24
     282:	19 f0       	breq	.+6      	; 0x28a <main+0x1e4>
     284:	80 e7       	ldi	r24, 0x70	; 112
     286:	f8 16       	cp	r15, r24
     288:	a1 f4       	brne	.+40     	; 0x2b2 <main+0x20c>
	  PORTD|= (1<<4);
     28a:	5c 9a       	sbi	0x0b, 4	; 11
	  WS2812B_send_rgb_Target(0x64,0x3B,0x9F);
     28c:	84 e6       	ldi	r24, 0x64	; 100
     28e:	6b e3       	ldi	r22, 0x3B	; 59
     290:	4f e9       	ldi	r20, 0x9F	; 159
     292:	0e 94 4a 02 	call	0x494	; 0x494 <WS2812B_send_rgb_Target>
	  UART_Tx_Parameter_NL("Executed Purple", WS2812B_Get_Max_Intensity());
     296:	0e 94 b4 02 	call	0x568	; 0x568 <WS2812B_Get_Max_Intensity>
     29a:	48 2f       	mov	r20, r24
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	70 e0       	ldi	r23, 0x00	; 0
     2a2:	87 e7       	ldi	r24, 0x77	; 119
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	0e 94 53 05 	call	0xaa6	; 0xaa6 <UART_Tx_Parameter_NL>
	  DataHandler_Buf_Flush();
     2aa:	0e 94 18 08 	call	0x1030	; 0x1030 <DataHandler_Buf_Flush>
	  cmd = 0;
	  PORTD&=~(1<<4);
     2ae:	5c 98       	cbi	0x0b, 4	; 11
     2b0:	ff 24       	eor	r15, r15
	}
	
	
	
	WS2812B_Sync();
     2b2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <WS2812B_Sync>
     2b6:	0b cf       	rjmp	.-490    	; 0xce <main+0x28>

000002b8 <WS2812B_Gpio_Init>:
	.MaxVal = DEFAULT_MAX_VALUE
};


void WS2812B_Gpio_Init(void){
  WS2812B_DDR  |=  (1<<WS2812B_bp);
     2b8:	55 9a       	sbi	0x0a, 5	; 10
  WS2812B_PORT &=~ (1<<WS2812B_bp);
     2ba:	5d 98       	cbi	0x0b, 5	; 11
}
     2bc:	08 95       	ret

000002be <WS2812B_Send_Byte>:

void WS2812B_Send_Byte(uint8_t val){
  if(val & 0x80){
     2be:	87 ff       	sbrs	r24, 7
     2c0:	0b c0       	rjmp	.+22     	; 0x2d8 <WS2812B_Send_Byte+0x1a>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     2c2:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     2c4:	00 00       	nop
    asm( "nop ");
     2c6:	00 00       	nop
    asm( "nop ");
     2c8:	00 00       	nop
    asm( "nop ");
     2ca:	00 00       	nop
    asm( "nop ");
     2cc:	00 00       	nop
    asm( "nop ");
     2ce:	00 00       	nop
	asm( "nop ");
     2d0:	00 00       	nop
    asm( "nop ");
     2d2:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     2d4:	5d 98       	cbi	0x0b, 5	; 11
     2d6:	0a c0       	rjmp	.+20     	; 0x2ec <WS2812B_Send_Byte+0x2e>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     2d8:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     2da:	00 00       	nop
    asm( "nop ");
     2dc:	00 00       	nop
    asm( "nop ");
     2de:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     2e0:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     2e2:	00 00       	nop
	asm( "nop ");
     2e4:	00 00       	nop
    asm( "nop ");
     2e6:	00 00       	nop
    asm( "nop ");
     2e8:	00 00       	nop
	asm( "nop ");
     2ea:	00 00       	nop
  }
  
  
  if(val & 0x40){
     2ec:	86 ff       	sbrs	r24, 6
     2ee:	0b c0       	rjmp	.+22     	; 0x306 <WS2812B_Send_Byte+0x48>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     2f0:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     2f2:	00 00       	nop
    asm( "nop ");
     2f4:	00 00       	nop
    asm( "nop ");
     2f6:	00 00       	nop
    asm( "nop ");
     2f8:	00 00       	nop
    asm( "nop ");
     2fa:	00 00       	nop
    asm( "nop ");
     2fc:	00 00       	nop
	asm( "nop ");
     2fe:	00 00       	nop
    asm( "nop ");
     300:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     302:	5d 98       	cbi	0x0b, 5	; 11
     304:	0a c0       	rjmp	.+20     	; 0x31a <WS2812B_Send_Byte+0x5c>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     306:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     308:	00 00       	nop
    asm( "nop ");
     30a:	00 00       	nop
    asm( "nop ");
     30c:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     30e:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     310:	00 00       	nop
	asm( "nop ");
     312:	00 00       	nop
    asm( "nop ");
     314:	00 00       	nop
    asm( "nop ");
     316:	00 00       	nop
	asm( "nop ");
     318:	00 00       	nop
  }
  
  
  if(val & 0x20){
     31a:	85 ff       	sbrs	r24, 5
     31c:	0b c0       	rjmp	.+22     	; 0x334 <WS2812B_Send_Byte+0x76>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     31e:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     320:	00 00       	nop
    asm( "nop ");
     322:	00 00       	nop
    asm( "nop ");
     324:	00 00       	nop
    asm( "nop ");
     326:	00 00       	nop
    asm( "nop ");
     328:	00 00       	nop
    asm( "nop ");
     32a:	00 00       	nop
	asm( "nop ");
     32c:	00 00       	nop
    asm( "nop ");
     32e:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     330:	5d 98       	cbi	0x0b, 5	; 11
     332:	0a c0       	rjmp	.+20     	; 0x348 <WS2812B_Send_Byte+0x8a>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     334:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     336:	00 00       	nop
    asm( "nop ");
     338:	00 00       	nop
    asm( "nop ");
     33a:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     33c:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     33e:	00 00       	nop
	asm( "nop ");
     340:	00 00       	nop
    asm( "nop ");
     342:	00 00       	nop
    asm( "nop ");
     344:	00 00       	nop
	asm( "nop ");
     346:	00 00       	nop
  }
  
  
  if(val & 0x10){
     348:	84 ff       	sbrs	r24, 4
     34a:	0b c0       	rjmp	.+22     	; 0x362 <WS2812B_Send_Byte+0xa4>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     34c:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     34e:	00 00       	nop
    asm( "nop ");
     350:	00 00       	nop
    asm( "nop ");
     352:	00 00       	nop
    asm( "nop ");
     354:	00 00       	nop
    asm( "nop ");
     356:	00 00       	nop
    asm( "nop ");
     358:	00 00       	nop
	asm( "nop ");
     35a:	00 00       	nop
    asm( "nop ");
     35c:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     35e:	5d 98       	cbi	0x0b, 5	; 11
     360:	0a c0       	rjmp	.+20     	; 0x376 <WS2812B_Send_Byte+0xb8>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     362:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     364:	00 00       	nop
    asm( "nop ");
     366:	00 00       	nop
    asm( "nop ");
     368:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     36a:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     36c:	00 00       	nop
	asm( "nop ");
     36e:	00 00       	nop
    asm( "nop ");
     370:	00 00       	nop
    asm( "nop ");
     372:	00 00       	nop
	asm( "nop ");
     374:	00 00       	nop
  }
  
  
  if(val & 0x08){
     376:	83 ff       	sbrs	r24, 3
     378:	0b c0       	rjmp	.+22     	; 0x390 <WS2812B_Send_Byte+0xd2>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     37a:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     37c:	00 00       	nop
    asm( "nop ");
     37e:	00 00       	nop
    asm( "nop ");
     380:	00 00       	nop
    asm( "nop ");
     382:	00 00       	nop
    asm( "nop ");
     384:	00 00       	nop
    asm( "nop ");
     386:	00 00       	nop
	asm( "nop ");
     388:	00 00       	nop
    asm( "nop ");
     38a:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     38c:	5d 98       	cbi	0x0b, 5	; 11
     38e:	0a c0       	rjmp	.+20     	; 0x3a4 <WS2812B_Send_Byte+0xe6>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     390:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     392:	00 00       	nop
    asm( "nop ");
     394:	00 00       	nop
    asm( "nop ");
     396:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     398:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     39a:	00 00       	nop
	asm( "nop ");
     39c:	00 00       	nop
    asm( "nop ");
     39e:	00 00       	nop
    asm( "nop ");
     3a0:	00 00       	nop
	asm( "nop ");
     3a2:	00 00       	nop
  }
  
  
  if(val & 0x04){
     3a4:	82 ff       	sbrs	r24, 2
     3a6:	0b c0       	rjmp	.+22     	; 0x3be <WS2812B_Send_Byte+0x100>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     3a8:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     3aa:	00 00       	nop
    asm( "nop ");
     3ac:	00 00       	nop
    asm( "nop ");
     3ae:	00 00       	nop
    asm( "nop ");
     3b0:	00 00       	nop
    asm( "nop ");
     3b2:	00 00       	nop
    asm( "nop ");
     3b4:	00 00       	nop
	asm( "nop ");
     3b6:	00 00       	nop
    asm( "nop ");
     3b8:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     3ba:	5d 98       	cbi	0x0b, 5	; 11
     3bc:	0a c0       	rjmp	.+20     	; 0x3d2 <WS2812B_Send_Byte+0x114>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     3be:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     3c0:	00 00       	nop
    asm( "nop ");
     3c2:	00 00       	nop
    asm( "nop ");
     3c4:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     3c6:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     3c8:	00 00       	nop
	asm( "nop ");
     3ca:	00 00       	nop
    asm( "nop ");
     3cc:	00 00       	nop
    asm( "nop ");
     3ce:	00 00       	nop
	asm( "nop ");
     3d0:	00 00       	nop
  }
  
  
  if(val & 0x02){
     3d2:	81 ff       	sbrs	r24, 1
     3d4:	0b c0       	rjmp	.+22     	; 0x3ec <WS2812B_Send_Byte+0x12e>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     3d6:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     3d8:	00 00       	nop
    asm( "nop ");
     3da:	00 00       	nop
    asm( "nop ");
     3dc:	00 00       	nop
    asm( "nop ");
     3de:	00 00       	nop
    asm( "nop ");
     3e0:	00 00       	nop
    asm( "nop ");
     3e2:	00 00       	nop
	asm( "nop ");
     3e4:	00 00       	nop
    asm( "nop ");
     3e6:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     3e8:	5d 98       	cbi	0x0b, 5	; 11
     3ea:	0a c0       	rjmp	.+20     	; 0x400 <WS2812B_Send_Byte+0x142>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     3ec:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     3ee:	00 00       	nop
    asm( "nop ");
     3f0:	00 00       	nop
    asm( "nop ");
     3f2:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     3f4:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     3f6:	00 00       	nop
	asm( "nop ");
     3f8:	00 00       	nop
    asm( "nop ");
     3fa:	00 00       	nop
    asm( "nop ");
     3fc:	00 00       	nop
	asm( "nop ");
     3fe:	00 00       	nop
  }
  
  
  if(val & 0x01){
     400:	80 ff       	sbrs	r24, 0
     402:	0b c0       	rjmp	.+22     	; 0x41a <WS2812B_Send_Byte+0x15c>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     404:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     406:	00 00       	nop
    asm( "nop ");
     408:	00 00       	nop
    asm( "nop ");
     40a:	00 00       	nop
    asm( "nop ");
     40c:	00 00       	nop
    asm( "nop ");
     40e:	00 00       	nop
    asm( "nop ");
     410:	00 00       	nop
	asm( "nop ");
     412:	00 00       	nop
    asm( "nop ");
     414:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     416:	5d 98       	cbi	0x0b, 5	; 11
     418:	08 95       	ret
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     41a:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     41c:	00 00       	nop
    asm( "nop ");
     41e:	00 00       	nop
    asm( "nop ");
     420:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     422:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     424:	00 00       	nop
	asm( "nop ");
     426:	00 00       	nop
    asm( "nop ");
     428:	00 00       	nop
    asm( "nop ");
     42a:	00 00       	nop
	asm( "nop ");
     42c:	00 00       	nop
     42e:	08 95       	ret

00000430 <WS2812B_Send_Pixel>:
  }
}

void WS2812B_Send_Pixel(uint8_t r, uint8_t g, uint8_t b){
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	18 2f       	mov	r17, r24
     436:	86 2f       	mov	r24, r22
     438:	04 2f       	mov	r16, r20
  WS2812B_Send_Byte(g);
     43a:	0e 94 5f 01 	call	0x2be	; 0x2be <WS2812B_Send_Byte>
  WS2812B_Send_Byte(r);
     43e:	81 2f       	mov	r24, r17
     440:	0e 94 5f 01 	call	0x2be	; 0x2be <WS2812B_Send_Byte>
  WS2812B_Send_Byte(b);
     444:	80 2f       	mov	r24, r16
     446:	0e 94 5f 01 	call	0x2be	; 0x2be <WS2812B_Send_Byte>
}
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	08 95       	ret

00000450 <WS2812B_Pixel_Delay>:

void WS2812B_Pixel_Delay(void){
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
  for(uint32_t i=0;i<40000;i++){
	asm( "nop ");
     454:	00 00       	nop
     456:	01 96       	adiw	r24, 0x01	; 1
  WS2812B_Send_Byte(r);
  WS2812B_Send_Byte(b);
}

void WS2812B_Pixel_Delay(void){
  for(uint32_t i=0;i<40000;i++){
     458:	2c e9       	ldi	r18, 0x9C	; 156
     45a:	80 34       	cpi	r24, 0x40	; 64
     45c:	92 07       	cpc	r25, r18
     45e:	d1 f7       	brne	.-12     	; 0x454 <WS2812B_Pixel_Delay+0x4>
	asm( "nop ");
  }
}
     460:	08 95       	ret

00000462 <WS2812B_send_rgb>:


void WS2812B_send_rgb(uint8_t red, uint8_t green, uint8_t blue){
     462:	ff 92       	push	r15
     464:	0f 93       	push	r16
     466:	1f 93       	push	r17
     468:	18 2f       	mov	r17, r24
     46a:	06 2f       	mov	r16, r22
     46c:	f4 2e       	mov	r15, r20
	WS2812B_Send_Byte(green);
     46e:	86 2f       	mov	r24, r22
     470:	0e 94 5f 01 	call	0x2be	; 0x2be <WS2812B_Send_Byte>
	WS2812B_Send_Byte(red);
     474:	81 2f       	mov	r24, r17
     476:	0e 94 5f 01 	call	0x2be	; 0x2be <WS2812B_Send_Byte>
	WS2812B_Send_Byte(blue);
     47a:	8f 2d       	mov	r24, r15
     47c:	0e 94 5f 01 	call	0x2be	; 0x2be <WS2812B_Send_Byte>
	WS2812B.Red = red;
     480:	10 93 87 01 	sts	0x0187, r17
	WS2812B.Green = green;
     484:	00 93 88 01 	sts	0x0188, r16
	WS2812B.Blue = blue;
     488:	f0 92 89 01 	sts	0x0189, r15
}
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	08 95       	ret

00000494 <WS2812B_send_rgb_Target>:



void WS2812B_send_rgb_Target(uint8_t red, uint8_t green, uint8_t blue){
	if(red > WS2812B.MaxVal){
     494:	90 91 8d 01 	lds	r25, 0x018D
     498:	98 17       	cp	r25, r24
     49a:	18 f4       	brcc	.+6      	; 0x4a2 <WS2812B_send_rgb_Target+0xe>
	  WS2812B.TargetRed = WS2812B.MaxVal;
     49c:	90 93 8a 01 	sts	0x018A, r25
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <WS2812B_send_rgb_Target+0x12>
	}
	else{
		WS2812B.TargetRed = red;
     4a2:	80 93 8a 01 	sts	0x018A, r24
	}
	
	if(green > WS2812B.MaxVal){
     4a6:	96 17       	cp	r25, r22
     4a8:	18 f4       	brcc	.+6      	; 0x4b0 <WS2812B_send_rgb_Target+0x1c>
	  WS2812B.TargetGreen = WS2812B.MaxVal;
     4aa:	90 93 8b 01 	sts	0x018B, r25
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <WS2812B_send_rgb_Target+0x20>
	}
	else{
		WS2812B.TargetGreen = green;
     4b0:	60 93 8b 01 	sts	0x018B, r22
	}
	
	if(blue > WS2812B.MaxVal){
     4b4:	94 17       	cp	r25, r20
     4b6:	18 f4       	brcc	.+6      	; 0x4be <WS2812B_send_rgb_Target+0x2a>
	  WS2812B.TargetBlue = WS2812B.MaxVal;
     4b8:	90 93 8c 01 	sts	0x018C, r25
     4bc:	08 95       	ret
	}
	else{
		WS2812B.TargetBlue = blue;
     4be:	40 93 8c 01 	sts	0x018C, r20
     4c2:	08 95       	ret

000004c4 <WS2812B_Sync>:
	}
}

void WS2812B_Sync(void){
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	00 e0       	ldi	r16, 0x00	; 0
     4d0:	ff 24       	eor	r15, r15
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4d2:	c8 e2       	ldi	r28, 0x28	; 40
     4d4:	d3 e2       	ldi	r29, 0x23	; 35
	uint8_t break_condition = 0;
	for(uint8_t i=0; i<255; i++){
		
		if(WS2812B.TargetRed > WS2812B.Red){
     4d6:	90 91 8a 01 	lds	r25, 0x018A
     4da:	80 91 87 01 	lds	r24, 0x0187
     4de:	89 17       	cp	r24, r25
     4e0:	10 f4       	brcc	.+4      	; 0x4e6 <WS2812B_Sync+0x22>
			WS2812B.Red++;
     4e2:	8f 5f       	subi	r24, 0xFF	; 255
     4e4:	03 c0       	rjmp	.+6      	; 0x4ec <WS2812B_Sync+0x28>
		} 
		else if(WS2812B.TargetRed < WS2812B.Red){
     4e6:	98 17       	cp	r25, r24
     4e8:	20 f4       	brcc	.+8      	; 0x4f2 <WS2812B_Sync+0x2e>
			WS2812B.Red--;
     4ea:	81 50       	subi	r24, 0x01	; 1
     4ec:	80 93 87 01 	sts	0x0187, r24
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <WS2812B_Sync+0x30>
		}else{
			break_condition |= 0x01;
     4f2:	01 60       	ori	r16, 0x01	; 1
		}
		
		if(WS2812B.TargetGreen > WS2812B.Green){
     4f4:	90 91 8b 01 	lds	r25, 0x018B
     4f8:	80 91 88 01 	lds	r24, 0x0188
     4fc:	89 17       	cp	r24, r25
     4fe:	10 f4       	brcc	.+4      	; 0x504 <WS2812B_Sync+0x40>
			WS2812B.Green++;
     500:	8f 5f       	subi	r24, 0xFF	; 255
     502:	03 c0       	rjmp	.+6      	; 0x50a <WS2812B_Sync+0x46>
		} 
		else if(WS2812B.TargetGreen < WS2812B.Green){
     504:	98 17       	cp	r25, r24
     506:	20 f4       	brcc	.+8      	; 0x510 <WS2812B_Sync+0x4c>
			WS2812B.Green--;
     508:	81 50       	subi	r24, 0x01	; 1
     50a:	80 93 88 01 	sts	0x0188, r24
     50e:	01 c0       	rjmp	.+2      	; 0x512 <WS2812B_Sync+0x4e>
		} 
		else{
			break_condition |= 0x02;
     510:	02 60       	ori	r16, 0x02	; 2
		}
		
		if(WS2812B.TargetBlue > WS2812B.Blue){
     512:	90 91 8c 01 	lds	r25, 0x018C
     516:	80 91 89 01 	lds	r24, 0x0189
     51a:	89 17       	cp	r24, r25
     51c:	10 f4       	brcc	.+4      	; 0x522 <WS2812B_Sync+0x5e>
			WS2812B.Blue++;
     51e:	8f 5f       	subi	r24, 0xFF	; 255
     520:	03 c0       	rjmp	.+6      	; 0x528 <WS2812B_Sync+0x64>
		} 
		else if(WS2812B.TargetBlue < WS2812B.Blue){
     522:	98 17       	cp	r25, r24
     524:	20 f4       	brcc	.+8      	; 0x52e <WS2812B_Sync+0x6a>
			WS2812B.Blue--;
     526:	81 50       	subi	r24, 0x01	; 1
     528:	80 93 89 01 	sts	0x0189, r24
     52c:	01 c0       	rjmp	.+2      	; 0x530 <WS2812B_Sync+0x6c>
		}
		else{
			break_condition |= 0x04;
     52e:	04 60       	ori	r16, 0x04	; 4
     530:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		for(uint8_t i=0;i<120;i++){
		  WS2812B_send_rgb(WS2812B.Red, WS2812B.Green, WS2812B.Blue);
     532:	80 91 87 01 	lds	r24, 0x0187
     536:	60 91 88 01 	lds	r22, 0x0188
     53a:	40 91 89 01 	lds	r20, 0x0189
     53e:	0e 94 31 02 	call	0x462	; 0x462 <WS2812B_send_rgb>
		}
		else{
			break_condition |= 0x04;
		}
		
		for(uint8_t i=0;i<120;i++){
     542:	1f 5f       	subi	r17, 0xFF	; 255
     544:	18 37       	cpi	r17, 0x78	; 120
     546:	a9 f7       	brne	.-22     	; 0x532 <WS2812B_Sync+0x6e>
     548:	ce 01       	movw	r24, r28
     54a:	01 97       	sbiw	r24, 0x01	; 1
     54c:	f1 f7       	brne	.-4      	; 0x54a <WS2812B_Sync+0x86>
		  WS2812B_send_rgb(WS2812B.Red, WS2812B.Green, WS2812B.Blue);
		}
		_delay_us(3000);
		
		if(break_condition == 0x07){
     54e:	07 30       	cpi	r16, 0x07	; 7
     550:	29 f0       	breq	.+10     	; 0x55c <WS2812B_Sync+0x98>
	}
}

void WS2812B_Sync(void){
	uint8_t break_condition = 0;
	for(uint8_t i=0; i<255; i++){
     552:	f3 94       	inc	r15
     554:	8f ef       	ldi	r24, 0xFF	; 255
     556:	f8 16       	cp	r15, r24
     558:	09 f0       	breq	.+2      	; 0x55c <WS2812B_Sync+0x98>
     55a:	bd cf       	rjmp	.-134    	; 0x4d6 <WS2812B_Sync+0x12>
		if(break_condition == 0x07){
			break;
		}
	}
	
}
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	ff 90       	pop	r15
     566:	08 95       	ret

00000568 <WS2812B_Get_Max_Intensity>:


uint8_t WS2812B_Get_Max_Intensity(void){
  return WS2812B.MaxVal;
}
     568:	80 91 8d 01 	lds	r24, 0x018D
     56c:	08 95       	ret

0000056e <WS2812B_Set_Max_Intensity>:

void WS2812B_Set_Max_Intensity(uint8_t val){
  WS2812B.MaxVal = val;
     56e:	80 93 8d 01 	sts	0x018D, r24
}
     572:	08 95       	ret

00000574 <WS2812B_Init>:
	.MaxVal = DEFAULT_MAX_VALUE
};


void WS2812B_Gpio_Init(void){
  WS2812B_DDR  |=  (1<<WS2812B_bp);
     574:	55 9a       	sbi	0x0a, 5	; 10
  WS2812B_PORT &=~ (1<<WS2812B_bp);
     576:	5d 98       	cbi	0x0b, 5	; 11
}

  
void WS2812B_Init(void){
  WS2812B_Gpio_Init();
}
     578:	08 95       	ret

0000057a <UART_Struct_Init>:


/*******************UART Structure Functions Start****************/

void UART_Struct_Init(void){
  UART.Error = 0;
     57a:	10 92 8e 01 	sts	0x018E, r1
     57e:	ef e8       	ldi	r30, 0x8F	; 143
     580:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i = 0; i < 8; i++){
    UART.Digits[i] = UART_NULL;
     582:	11 92       	st	Z+, r1

/*******************UART Structure Functions Start****************/

void UART_Struct_Init(void){
  UART.Error = 0;
  for(uint8_t i = 0; i < 8; i++){
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	e7 39       	cpi	r30, 0x97	; 151
     588:	f8 07       	cpc	r31, r24
     58a:	d9 f7       	brne	.-10     	; 0x582 <UART_Struct_Init+0x8>
    UART.Digits[i] = UART_NULL;
  }
  UART.InputNumDigits = UART_NULL;
     58c:	10 82       	st	Z, r1
  UART.LastRxByte = UART_NULL;
     58e:	11 82       	std	Z+1, r1	; 0x01
  UART.BufSize = UART_BUFFER_SIZE;
     590:	80 e4       	ldi	r24, 0x40	; 64
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	90 93 da 01 	sts	0x01DA, r25
     598:	80 93 d9 01 	sts	0x01D9, r24
  UART.BufIndex = 0;
     59c:	10 92 dc 01 	sts	0x01DC, r1
     5a0:	10 92 db 01 	sts	0x01DB, r1
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <UART_Struct_Init+0x36>
  for(uint8_t i = 0; i < UART.BufSize; i++){
    UART.Buf[i] = UART_NULL;
     5a8:	e2 57       	subi	r30, 0x72	; 114
     5aa:	fe 4f       	sbci	r31, 0xFE	; 254
     5ac:	13 86       	std	Z+11, r1	; 0x0b
  }
  UART.InputNumDigits = UART_NULL;
  UART.LastRxByte = UART_NULL;
  UART.BufSize = UART_BUFFER_SIZE;
  UART.BufIndex = 0;
  for(uint8_t i = 0; i < UART.BufSize; i++){
     5ae:	2f 5f       	subi	r18, 0xFF	; 255
     5b0:	80 91 d9 01 	lds	r24, 0x01D9
     5b4:	90 91 da 01 	lds	r25, 0x01DA
     5b8:	e2 2f       	mov	r30, r18
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	e8 17       	cp	r30, r24
     5be:	f9 07       	cpc	r31, r25
     5c0:	98 f3       	brcs	.-26     	; 0x5a8 <UART_Struct_Init+0x2e>
    UART.Buf[i] = UART_NULL;
  }
}
     5c2:	08 95       	ret

000005c4 <UART_RX_Packet_Struct_Init>:

void UART_RX_Packet_Struct_Init(void){
  UART.RxPacket.CalculatedCRC    = UART_NULL;
     5c4:	10 92 e0 01 	sts	0x01E0, r1
     5c8:	10 92 df 01 	sts	0x01DF, r1
  UART.RxPacket.ReceivedCRC      = UART_NULL;
     5cc:	10 92 e2 01 	sts	0x01E2, r1
     5d0:	10 92 e1 01 	sts	0x01E1, r1
  UART.RxPacket.CRCStatus        = UART_FALSE;
     5d4:	10 92 e3 01 	sts	0x01E3, r1
  UART.RxPacket.DataAvailable    = UART_FALSE;
     5d8:	10 92 e4 01 	sts	0x01E4, r1
  UART.RxPacket.DataReadComplete = UART_TRUE;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	80 93 e5 01 	sts	0x01E5, r24
}
     5e2:	08 95       	ret

000005e4 <UART_Config_GPIO>:

/*********************UART Init Functions Start******************/

void UART_Config_GPIO(void){
  //add gpio config
}
     5e4:	08 95       	ret

000005e6 <UART_Config_Clock>:

void UART_Config_Clock(void){
  //add clock config
}
     5e6:	08 95       	ret

000005e8 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
     5e8:	9b 01       	movw	r18, r22
     5ea:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
     5ec:	60 e6       	ldi	r22, 0x60	; 96
     5ee:	73 ee       	ldi	r23, 0xE3	; 227
     5f0:	86 e1       	ldi	r24, 0x16	; 22
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 42 08 	call	0x1084	; 0x1084 <__udivmodsi4>
     5f8:	21 50       	subi	r18, 0x01	; 1
     5fa:	30 40       	sbci	r19, 0x00	; 0
     5fc:	40 40       	sbci	r20, 0x00	; 0
     5fe:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A |= (1<<U2X0);  
     600:	e0 ec       	ldi	r30, 0xC0	; 192
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	82 60       	ori	r24, 0x02	; 2
     608:	80 83       	st	Z, r24
  #else
  UCSR0A &=~ (1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     60a:	bb 27       	eor	r27, r27
     60c:	a5 2f       	mov	r26, r21
     60e:	94 2f       	mov	r25, r20
     610:	83 2f       	mov	r24, r19
     612:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     616:	20 93 c4 00 	sts	0x00C4, r18
}
     61a:	08 95       	ret

0000061c <UART_Config_Tx>:


void UART_Config_Tx(void){
  UCSR0B |= (1<<TXEN0);
     61c:	e1 ec       	ldi	r30, 0xC1	; 193
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	88 60       	ori	r24, 0x08	; 8
     624:	80 83       	st	Z, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
     626:	86 e0       	ldi	r24, 0x06	; 6
     628:	80 93 c2 00 	sts	0x00C2, r24
}
     62c:	08 95       	ret

0000062e <UART_Config_Rx>:


void UART_Config_Rx(void){
  UCSR0B |= (1<<RXEN0);
     62e:	e1 ec       	ldi	r30, 0xC1	; 193
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	80 61       	ori	r24, 0x10	; 16
     636:	80 83       	st	Z, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
     638:	86 e0       	ldi	r24, 0x06	; 6
     63a:	80 93 c2 00 	sts	0x00C2, r24
}
     63e:	08 95       	ret

00000640 <UART_Config_Rx_Interrupt>:

void UART_Config_Rx_Interrupt(void){
  UCSR0B |= (1<<RXCIE0);
     640:	e1 ec       	ldi	r30, 0xC1	; 193
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	80 81       	ld	r24, Z
     646:	80 68       	ori	r24, 0x80	; 128
     648:	80 83       	st	Z, r24
  sei();
     64a:	78 94       	sei
}
     64c:	08 95       	ret

0000064e <UART_Clear_Interrupt_Flag>:

void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}
     64e:	08 95       	ret

00000650 <UART_Tx_Byte>:

void UART_Tx_Byte(uint8_t val){
     650:	98 2f       	mov	r25, r24
  while( !(UCSR0A & (1<<UDRE0)) );
     652:	80 91 c0 00 	lds	r24, 0x00C0
     656:	85 ff       	sbrs	r24, 5
     658:	fc cf       	rjmp	.-8      	; 0x652 <UART_Tx_Byte+0x2>
  UDR0 = val;                                                                                                        
     65a:	90 93 c6 00 	sts	0x00C6, r25
}
     65e:	08 95       	ret

00000660 <UART_Rx_Byte>:

uint8_t UART_Rx_Byte(void){
     660:	df 93       	push	r29
     662:	cf 93       	push	r28
     664:	0f 92       	push	r0
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val = 0;
     66a:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
     66c:	80 91 c0 00 	lds	r24, 0x00C0
     670:	84 ff       	sbrs	r24, 4
     672:	05 c0       	rjmp	.+10     	; 0x67e <UART_Rx_Byte+0x1e>
    val = UDR0;
     674:	80 91 c6 00 	lds	r24, 0x00C6
     678:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_FRAMING;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	08 c0       	rjmp	.+16     	; 0x68e <UART_Rx_Byte+0x2e>
  }else if( UCSR0A & (1<<DOR0) ){
     67e:	80 91 c0 00 	lds	r24, 0x00C0
     682:	83 ff       	sbrs	r24, 3
     684:	07 c0       	rjmp	.+14     	; 0x694 <UART_Rx_Byte+0x34>
    val = UDR0;
     686:	80 91 c6 00 	lds	r24, 0x00C6
     68a:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_OVERRUN;
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	80 93 8e 01 	sts	0x018E, r24
     692:	05 c0       	rjmp	.+10     	; 0x69e <UART_Rx_Byte+0x3e>
  }else{
    val = UDR0;
     694:	80 91 c6 00 	lds	r24, 0x00C6
     698:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_NO_ERR;
     69a:	10 92 8e 01 	sts	0x018E, r1
  }
  return val;
     69e:	89 81       	ldd	r24, Y+1	; 0x01
}
     6a0:	0f 90       	pop	r0
     6a2:	cf 91       	pop	r28
     6a4:	df 91       	pop	r29
     6a6:	08 95       	ret

000006a8 <UART_Timer_Struct_Init>:


/********************UART Timer Functions Start*****************/

void UART_Timer_Struct_Init(void){
  UART.Timer.Enabled = UART_FALSE;
     6a8:	10 92 dd 01 	sts	0x01DD, r1
  UART.Timer.ResetVal = UART_NULL;
     6ac:	10 92 de 01 	sts	0x01DE, r1
}
     6b0:	08 95       	ret

000006b2 <UART_Timer_Init>:
  uint32_t temp0 = F_CPU;
  uint32_t temp1 = UART_RX_PCKT_CMPLT_DELAY;
  temp1 *= 1000;
  temp0 /= 1024;             //Prescaler
  temp1 /= temp0;                    
  UART.Timer.ResetVal = temp1;
     6b2:	84 e0       	ldi	r24, 0x04	; 4
     6b4:	80 93 de 01 	sts	0x01DE, r24
  UART.Timer.ResetVal = 0xFF - temp1;
     6b8:	8b ef       	ldi	r24, 0xFB	; 251
     6ba:	80 93 de 01 	sts	0x01DE, r24
  
  ASSR   = 0x00;
     6be:	10 92 b6 00 	sts	0x00B6, r1
  TCCR2A = 0x00;
     6c2:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = 0x00;
     6c6:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 = 0x00;
     6ca:	e0 e7       	ldi	r30, 0x70	; 112
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	10 82       	st	Z, r1
  TCNT2  = 0x00;
     6d0:	10 92 b2 00 	sts	0x00B2, r1
  TIFR2  = 0xFF;
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	87 bb       	out	0x17, r24	; 23
  TIMSK2 = (1<<TOIE2);
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	80 83       	st	Z, r24
  sei();
     6dc:	78 94       	sei
  #if UART_RX_PCKT_CMPLT_DELAY<20U
    #warning UART_RX_PCKT_CMPLT_DELAY value < 20
  #endif
}
     6de:	08 95       	ret

000006e0 <UART_Timer_Enable>:

void UART_Timer_Enable(void){
  TCCR2B = 0x07;
     6e0:	87 e0       	ldi	r24, 0x07	; 7
     6e2:	80 93 b1 00 	sts	0x00B1, r24
}
     6e6:	08 95       	ret

000006e8 <UART_Timer_Disable>:

void UART_Timer_Disable(void){ 
  TCCR2B = 0x00;
     6e8:	10 92 b1 00 	sts	0x00B1, r1
}
     6ec:	08 95       	ret

000006ee <UART_Timer_Get_Status>:

uint8_t UART_Timer_Get_Status(void){
  return UART.Timer.Enabled;
     6ee:	80 91 dd 01 	lds	r24, 0x01DD
}
     6f2:	08 95       	ret

000006f4 <UART_Timer_Get_Val>:

uint16_t UART_Timer_Get_Val(void){
  return TCNT2;
     6f4:	80 91 b2 00 	lds	r24, 0x00B2
}
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	08 95       	ret

000006fc <UART_Timer_Value_Reset>:


void UART_Timer_Value_Reset(void){
  TCNT2 = UART.Timer.ResetVal;
     6fc:	80 91 de 01 	lds	r24, 0x01DE
     700:	80 93 b2 00 	sts	0x00B2, r24
}
     704:	08 95       	ret

00000706 <UART_Timer_Clear_Interrupt_Flag>:

void UART_Timer_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}
     706:	08 95       	ret

00000708 <UART_Tx_Buf>:



/********************Buffer Tx Functions Start*******************/

void UART_Tx_Buf(uint8_t *data, uint8_t len){
     708:	ac 01       	movw	r20, r24
     70a:	20 e0       	ldi	r18, 0x00	; 0
     70c:	30 e0       	ldi	r19, 0x00	; 0
  for(uint16_t i = 0; i < len; i++){
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	0c c0       	rjmp	.+24     	; 0x72a <UART_Tx_Buf+0x22>
	UART_Tx_Byte( data[i] );
     712:	fa 01       	movw	r30, r20
     714:	e2 0f       	add	r30, r18
     716:	f3 1f       	adc	r31, r19
     718:	e0 81       	ld	r30, Z
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     71a:	80 91 c0 00 	lds	r24, 0x00C0
     71e:	85 ff       	sbrs	r24, 5
     720:	fc cf       	rjmp	.-8      	; 0x71a <UART_Tx_Buf+0x12>
  UDR0 = val;                                                                                                        
     722:	e0 93 c6 00 	sts	0x00C6, r30


/********************Buffer Tx Functions Start*******************/

void UART_Tx_Buf(uint8_t *data, uint8_t len){
  for(uint16_t i = 0; i < len; i++){
     726:	2f 5f       	subi	r18, 0xFF	; 255
     728:	3f 4f       	sbci	r19, 0xFF	; 255
     72a:	26 17       	cp	r18, r22
     72c:	37 07       	cpc	r19, r23
     72e:	88 f3       	brcs	.-30     	; 0x712 <UART_Tx_Buf+0xa>
	UART_Tx_Byte( data[i] );
  }
}
     730:	08 95       	ret

00000732 <UART_Tx_NL>:
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     732:	80 91 c0 00 	lds	r24, 0x00C0
     736:	85 ff       	sbrs	r24, 5
     738:	fc cf       	rjmp	.-8      	; 0x732 <UART_Tx_NL>
  UDR0 = val;                                                                                                        
     73a:	8d e0       	ldi	r24, 0x0D	; 13
     73c:	80 93 c6 00 	sts	0x00C6, r24
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     740:	80 91 c0 00 	lds	r24, 0x00C0
     744:	85 ff       	sbrs	r24, 5
     746:	fc cf       	rjmp	.-8      	; 0x740 <UART_Tx_NL+0xe>
  UDR0 = val;                                                                                                        
     748:	8a e0       	ldi	r24, 0x0A	; 10
     74a:	80 93 c6 00 	sts	0x00C6, r24
/*******************End Char Functions Start******************/

void UART_Tx_NL(void){
  UART_Tx_Byte('\r');
  UART_Tx_Byte('\n');
}
     74e:	08 95       	ret

00000750 <UART_Tx_SP>:
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     750:	80 91 c0 00 	lds	r24, 0x00C0
     754:	85 ff       	sbrs	r24, 5
     756:	fc cf       	rjmp	.-8      	; 0x750 <UART_Tx_SP>
  UDR0 = val;                                                                                                        
     758:	80 e2       	ldi	r24, 0x20	; 32
     75a:	80 93 c6 00 	sts	0x00C6, r24
  UART_Tx_Byte('\n');
}

void UART_Tx_SP(void){
  UART_Tx_Byte(' ');
}
     75e:	08 95       	ret

00000760 <UART_Tx_CM>:
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     760:	80 91 c0 00 	lds	r24, 0x00C0
     764:	85 ff       	sbrs	r24, 5
     766:	fc cf       	rjmp	.-8      	; 0x760 <UART_Tx_CM>
  UDR0 = val;                                                                                                        
     768:	8c e2       	ldi	r24, 0x2C	; 44
     76a:	80 93 c6 00 	sts	0x00C6, r24
  UART_Tx_Byte(' ');
}

void UART_Tx_CM(void){
  UART_Tx_Byte(',');
}
     76e:	08 95       	ret

00000770 <UART_Tx_Text>:



/*********************Text Functions Start*******************/

void UART_Tx_Text(char *str){
     770:	ac 01       	movw	r20, r24
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	07 c0       	rjmp	.+14     	; 0x784 <UART_Tx_Text+0x14>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     776:	80 91 c0 00 	lds	r24, 0x00C0
     77a:	85 ff       	sbrs	r24, 5
     77c:	fc cf       	rjmp	.-8      	; 0x776 <UART_Tx_Text+0x6>
  UDR0 = val;                                                                                                        
     77e:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
    UART_Tx_Byte(str[i]);
    i++;
     782:	2f 5f       	subi	r18, 0xFF	; 255

/*********************Text Functions Start*******************/

void UART_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
     784:	fa 01       	movw	r30, r20
     786:	e2 0f       	add	r30, r18
     788:	f1 1d       	adc	r31, r1
     78a:	e0 81       	ld	r30, Z
     78c:	ee 23       	and	r30, r30
     78e:	99 f7       	brne	.-26     	; 0x776 <UART_Tx_Text+0x6>
    UART_Tx_Byte(str[i]);
    i++;
  }
}
     790:	08 95       	ret

00000792 <UART_Tx_Text_NL>:

void UART_Tx_Text_NL(char *str){
  UART_Tx_Text(str);
     792:	0e 94 b8 03 	call	0x770	; 0x770 <UART_Tx_Text>
  UART_Tx_NL();
     796:	0e 94 99 03 	call	0x732	; 0x732 <UART_Tx_NL>
}
     79a:	08 95       	ret

0000079c <UART_Tx_Text_SP>:

void UART_Tx_Text_SP(char *str){
  UART_Tx_Text(str);
     79c:	0e 94 b8 03 	call	0x770	; 0x770 <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     7a0:	80 91 c0 00 	lds	r24, 0x00C0
     7a4:	85 ff       	sbrs	r24, 5
     7a6:	fc cf       	rjmp	.-8      	; 0x7a0 <UART_Tx_Text_SP+0x4>
  UDR0 = val;                                                                                                        
     7a8:	80 e2       	ldi	r24, 0x20	; 32
     7aa:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Text_SP(char *str){
  UART_Tx_Text(str);
  UART_Tx_SP();
}
     7ae:	08 95       	ret

000007b0 <UART_Tx_Text_CM>:

void UART_Tx_Text_CM(char *str){
  UART_Tx_Text(str);
     7b0:	0e 94 b8 03 	call	0x770	; 0x770 <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     7b4:	80 91 c0 00 	lds	r24, 0x00C0
     7b8:	85 ff       	sbrs	r24, 5
     7ba:	fc cf       	rjmp	.-8      	; 0x7b4 <UART_Tx_Text_CM+0x4>
  UDR0 = val;                                                                                                        
     7bc:	8c e2       	ldi	r24, 0x2C	; 44
     7be:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Text_CM(char *str){
  UART_Tx_Text(str);
  UART_Tx_CM();
}
     7c2:	08 95       	ret

000007c4 <UART_Determine_Digit_Numbers>:



/*********************Number Functions Start********************/

void UART_Determine_Digit_Numbers(uint32_t num){
     7c4:	bf 92       	push	r11
     7c6:	cf 92       	push	r12
     7c8:	df 92       	push	r13
     7ca:	ef 92       	push	r14
     7cc:	ff 92       	push	r15
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	6b 01       	movw	r12, r22
     7d4:	7c 01       	movw	r14, r24
  uint8_t i = 0;
  if(num == 0){
     7d6:	61 15       	cp	r22, r1
     7d8:	71 05       	cpc	r23, r1
     7da:	81 05       	cpc	r24, r1
     7dc:	91 05       	cpc	r25, r1
     7de:	31 f4       	brne	.+12     	; 0x7ec <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0] = 0;
     7e0:	10 92 8f 01 	sts	0x018F, r1
    UART.InputNumDigits = 1;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	80 93 97 01 	sts	0x0197, r24
     7ea:	23 c0       	rjmp	.+70     	; 0x832 <UART_Determine_Digit_Numbers+0x6e>
     7ec:	bb 24       	eor	r11, r11
  }else{
    while(num != 0){
      UART.Digits[i] = num%10;
     7ee:	0b 2d       	mov	r16, r11
     7f0:	10 e0       	ldi	r17, 0x00	; 0
     7f2:	02 57       	subi	r16, 0x72	; 114
     7f4:	1e 4f       	sbci	r17, 0xFE	; 254
     7f6:	c7 01       	movw	r24, r14
     7f8:	b6 01       	movw	r22, r12
     7fa:	2a e0       	ldi	r18, 0x0A	; 10
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	40 e0       	ldi	r20, 0x00	; 0
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	0e 94 42 08 	call	0x1084	; 0x1084 <__udivmodsi4>
     806:	f8 01       	movw	r30, r16
     808:	61 83       	std	Z+1, r22	; 0x01
      num /= 10;
     80a:	c7 01       	movw	r24, r14
     80c:	b6 01       	movw	r22, r12
     80e:	2a e0       	ldi	r18, 0x0A	; 10
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	0e 94 42 08 	call	0x1084	; 0x1084 <__udivmodsi4>
     81a:	c9 01       	movw	r24, r18
     81c:	da 01       	movw	r26, r20
     81e:	6c 01       	movw	r12, r24
     820:	7d 01       	movw	r14, r26
      i++;
     822:	b3 94       	inc	r11
  uint8_t i = 0;
  if(num == 0){
    UART.Digits[0] = 0;
    UART.InputNumDigits = 1;
  }else{
    while(num != 0){
     824:	c1 14       	cp	r12, r1
     826:	d1 04       	cpc	r13, r1
     828:	e1 04       	cpc	r14, r1
     82a:	f1 04       	cpc	r15, r1
     82c:	01 f7       	brne	.-64     	; 0x7ee <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i] = num%10;
      num /= 10;
      i++;
    }
	UART.InputNumDigits = i;
     82e:	b0 92 97 01 	sts	0x0197, r11
  }
}
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	ff 90       	pop	r15
     838:	ef 90       	pop	r14
     83a:	df 90       	pop	r13
     83c:	cf 90       	pop	r12
     83e:	bf 90       	pop	r11
     840:	08 95       	ret

00000842 <UART_Tx_Number_Digits>:

void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
     842:	e0 91 97 01 	lds	r30, 0x0197
     846:	0f c0       	rjmp	.+30     	; 0x866 <UART_Tx_Number_Digits+0x24>
    uint8_t temp = i;
    temp -= 1;
     848:	2e 2f       	mov	r18, r30
     84a:	21 50       	subi	r18, 0x01	; 1
    temp  = UART.Digits[temp];
     84c:	e2 2f       	mov	r30, r18
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	e2 57       	subi	r30, 0x72	; 114
     852:	fe 4f       	sbci	r31, 0xFE	; 254
     854:	91 81       	ldd	r25, Z+1	; 0x01
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     856:	80 91 c0 00 	lds	r24, 0x00C0
     85a:	85 ff       	sbrs	r24, 5
     85c:	fc cf       	rjmp	.-8      	; 0x856 <UART_Tx_Number_Digits+0x14>
void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    uint8_t temp = i;
    temp -= 1;
    temp  = UART.Digits[temp];
    temp += 48;
     85e:	90 5d       	subi	r25, 0xD0	; 208
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
  UDR0 = val;                                                                                                        
     860:	90 93 c6 00 	sts	0x00C6, r25
     864:	e2 2f       	mov	r30, r18
	UART.InputNumDigits = i;
  }
}

void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
     866:	ee 23       	and	r30, r30
     868:	79 f7       	brne	.-34     	; 0x848 <UART_Tx_Number_Digits+0x6>
    temp -= 1;
    temp  = UART.Digits[temp];
    temp += 48;
    UART_Tx_Byte(temp);
  }
}
     86a:	08 95       	ret

0000086c <UART_Tx_Number>:

void UART_Tx_Number(int32_t num){
     86c:	9b 01       	movw	r18, r22
     86e:	ac 01       	movw	r20, r24
  if(num < 0){
     870:	97 ff       	sbrs	r25, 7
     872:	0e c0       	rjmp	.+28     	; 0x890 <UART_Tx_Number+0x24>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     874:	80 91 c0 00 	lds	r24, 0x00C0
     878:	85 ff       	sbrs	r24, 5
     87a:	fc cf       	rjmp	.-8      	; 0x874 <UART_Tx_Number+0x8>
  UDR0 = val;                                                                                                        
     87c:	8d e2       	ldi	r24, 0x2D	; 45
     87e:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number(int32_t num){
  if(num < 0){
    UART_Tx_Byte('-');
	  num = -num;
     882:	50 95       	com	r21
     884:	40 95       	com	r20
     886:	30 95       	com	r19
     888:	21 95       	neg	r18
     88a:	3f 4f       	sbci	r19, 0xFF	; 255
     88c:	4f 4f       	sbci	r20, 0xFF	; 255
     88e:	5f 4f       	sbci	r21, 0xFF	; 255
  }
  UART_Determine_Digit_Numbers((uint32_t)num);
     890:	ca 01       	movw	r24, r20
     892:	b9 01       	movw	r22, r18
     894:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <UART_Determine_Digit_Numbers>
  UART_Tx_Number_Digits();
     898:	0e 94 21 04 	call	0x842	; 0x842 <UART_Tx_Number_Digits>
}
     89c:	08 95       	ret

0000089e <UART_Tx_Number_Hex>:

void UART_Tx_Number_Hex(uint32_t val){
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	ab 01       	movw	r20, r22
     8a6:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index = 0, loop_counter = 0;
  if(val <= 0xFF){
     8a8:	4f 3f       	cpi	r20, 0xFF	; 255
     8aa:	51 05       	cpc	r21, r1
     8ac:	61 05       	cpc	r22, r1
     8ae:	71 05       	cpc	r23, r1
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <UART_Tx_Number_Hex+0x16>
     8b2:	28 f4       	brcc	.+10     	; 0x8be <UART_Tx_Number_Hex+0x20>
     8b4:	e8 e0       	ldi	r30, 0x08	; 8
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	c2 e0       	ldi	r28, 0x02	; 2
     8ba:	d0 e0       	ldi	r29, 0x00	; 0
     8bc:	11 c0       	rjmp	.+34     	; 0x8e0 <UART_Tx_Number_Hex+0x42>
    index = 8;
    loop_counter = 2;
  }else if(val <= 0xFFFF){
     8be:	40 30       	cpi	r20, 0x00	; 0
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	58 07       	cpc	r21, r24
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	68 07       	cpc	r22, r24
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	78 07       	cpc	r23, r24
     8cc:	28 f0       	brcs	.+10     	; 0x8d8 <UART_Tx_Number_Hex+0x3a>
     8ce:	e0 e2       	ldi	r30, 0x20	; 32
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	c8 e0       	ldi	r28, 0x08	; 8
     8d4:	d0 e0       	ldi	r29, 0x00	; 0
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <UART_Tx_Number_Hex+0x42>
     8d8:	e0 e1       	ldi	r30, 0x10	; 16
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	c4 e0       	ldi	r28, 0x04	; 4
     8de:	d0 e0       	ldi	r29, 0x00	; 0
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     8e0:	80 91 c0 00 	lds	r24, 0x00C0
     8e4:	85 ff       	sbrs	r24, 5
     8e6:	fc cf       	rjmp	.-8      	; 0x8e0 <UART_Tx_Number_Hex+0x42>
  UDR0 = val;                                                                                                        
     8e8:	80 e3       	ldi	r24, 0x30	; 48
     8ea:	80 93 c6 00 	sts	0x00C6, r24
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     8ee:	80 91 c0 00 	lds	r24, 0x00C0
     8f2:	85 ff       	sbrs	r24, 5
     8f4:	fc cf       	rjmp	.-8      	; 0x8ee <UART_Tx_Number_Hex+0x50>
  UDR0 = val;                                                                                                        
     8f6:	88 e7       	ldi	r24, 0x78	; 120
     8f8:	80 93 c6 00 	sts	0x00C6, r24
     8fc:	10 e0       	ldi	r17, 0x00	; 0
     8fe:	1f c0       	rjmp	.+62     	; 0x93e <__stack+0x3f>
    loop_counter = 8;
  }
  UART_Tx_Byte('0');
  UART_Tx_Byte('x');
  for(uint8_t i = 0; i < loop_counter; i++){
	index -= 4;
     900:	34 97       	sbiw	r30, 0x04	; 4
	hex_digit = (uint8_t)((val>>index) & 0x0F);
     902:	db 01       	movw	r26, r22
     904:	ca 01       	movw	r24, r20
     906:	0e 2e       	mov	r0, r30
     908:	04 c0       	rjmp	.+8      	; 0x912 <__stack+0x13>
     90a:	b6 95       	lsr	r27
     90c:	a7 95       	ror	r26
     90e:	97 95       	ror	r25
     910:	87 95       	ror	r24
     912:	0a 94       	dec	r0
     914:	d2 f7       	brpl	.-12     	; 0x90a <__stack+0xb>
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	8f 70       	andi	r24, 0x0F	; 15
     91a:	90 70       	andi	r25, 0x00	; 0
	if(hex_digit > 9){
     91c:	8a 30       	cpi	r24, 0x0A	; 10
     91e:	91 05       	cpc	r25, r1
     920:	20 f0       	brcs	.+8      	; 0x92a <__stack+0x2b>
	  hex_digit += 55;
     922:	9c 01       	movw	r18, r24
     924:	29 5c       	subi	r18, 0xC9	; 201
     926:	3f 4f       	sbci	r19, 0xFF	; 255
     928:	03 c0       	rjmp	.+6      	; 0x930 <__stack+0x31>
	}
	else{
	  hex_digit += 48;
     92a:	9c 01       	movw	r18, r24
     92c:	20 5d       	subi	r18, 0xD0	; 208
     92e:	3f 4f       	sbci	r19, 0xFF	; 255
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     930:	80 91 c0 00 	lds	r24, 0x00C0
     934:	85 ff       	sbrs	r24, 5
     936:	fc cf       	rjmp	.-8      	; 0x930 <__stack+0x31>
  UDR0 = val;                                                                                                        
     938:	20 93 c6 00 	sts	0x00C6, r18
    index = 32;
    loop_counter = 8;
  }
  UART_Tx_Byte('0');
  UART_Tx_Byte('x');
  for(uint8_t i = 0; i < loop_counter; i++){
     93c:	1f 5f       	subi	r17, 0xFF	; 255
     93e:	81 2f       	mov	r24, r17
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	8c 17       	cp	r24, r28
     944:	9d 07       	cpc	r25, r29
     946:	e0 f2       	brcs	.-72     	; 0x900 <__stack+0x1>
	else{
	  hex_digit += 48;
	}
	UART_Tx_Byte((uint8_t)hex_digit);
  }
}
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	08 95       	ret

00000950 <UART_Tx_Number_Bin>:

void UART_Tx_Number_Bin(uint32_t val){
     950:	cf 92       	push	r12
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	ab 01       	movw	r20, r22
     962:	bc 01       	movw	r22, r24
  uint8_t loop_counter = 0;
  if(val <= 0xFF){
     964:	4f 3f       	cpi	r20, 0xFF	; 255
     966:	51 05       	cpc	r21, r1
     968:	61 05       	cpc	r22, r1
     96a:	71 05       	cpc	r23, r1
     96c:	09 f0       	breq	.+2      	; 0x970 <UART_Tx_Number_Bin+0x20>
     96e:	10 f4       	brcc	.+4      	; 0x974 <UART_Tx_Number_Bin+0x24>
     970:	97 e0       	ldi	r25, 0x07	; 7
     972:	0b c0       	rjmp	.+22     	; 0x98a <UART_Tx_Number_Bin+0x3a>
    loop_counter = 7;
  }else if(val <= 0xFFFF){
     974:	40 30       	cpi	r20, 0x00	; 0
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	58 07       	cpc	r21, r24
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	68 07       	cpc	r22, r24
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	78 07       	cpc	r23, r24
     982:	10 f0       	brcs	.+4      	; 0x988 <UART_Tx_Number_Bin+0x38>
     984:	9f e1       	ldi	r25, 0x1F	; 31
     986:	01 c0       	rjmp	.+2      	; 0x98a <UART_Tx_Number_Bin+0x3a>
     988:	9f e0       	ldi	r25, 0x0F	; 15
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     98a:	80 91 c0 00 	lds	r24, 0x00C0
     98e:	85 ff       	sbrs	r24, 5
     990:	fc cf       	rjmp	.-8      	; 0x98a <UART_Tx_Number_Bin+0x3a>
  UDR0 = val;                                                                                                        
     992:	80 e3       	ldi	r24, 0x30	; 48
     994:	80 93 c6 00 	sts	0x00C6, r24
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     998:	80 91 c0 00 	lds	r24, 0x00C0
     99c:	85 ff       	sbrs	r24, 5
     99e:	fc cf       	rjmp	.-8      	; 0x998 <UART_Tx_Number_Bin+0x48>
  UDR0 = val;                                                                                                        
     9a0:	82 e6       	ldi	r24, 0x62	; 98
     9a2:	80 93 c6 00 	sts	0x00C6, r24
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	30 e0       	ldi	r19, 0x00	; 0
	}
	UART_Tx_Byte((uint8_t)hex_digit);
  }
}

void UART_Tx_Number_Bin(uint32_t val){
     9aa:	e9 2f       	mov	r30, r25
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
  UDR0 = val;                                                                                                        
     9ae:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter = 31;
  }
  
  UART_Tx_Byte('0');
  UART_Tx_Byte('b');
  for(int i = loop_counter; i >= 0; i--){
     9b0:	11 e3       	ldi	r17, 0x31	; 49
     9b2:	ef 01       	movw	r28, r30
     9b4:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
     9b6:	cf 01       	movw	r24, r30
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	6a 01       	movw	r12, r20
     9be:	7b 01       	movw	r14, r22
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <UART_Tx_Number_Bin+0x7a>
     9c2:	f6 94       	lsr	r15
     9c4:	e7 94       	ror	r14
     9c6:	d7 94       	ror	r13
     9c8:	c7 94       	ror	r12
     9ca:	8a 95       	dec	r24
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <UART_Tx_Number_Bin+0x72>
     9ce:	d7 01       	movw	r26, r14
     9d0:	c6 01       	movw	r24, r12
     9d2:	81 70       	andi	r24, 0x01	; 1
     9d4:	90 70       	andi	r25, 0x00	; 0
     9d6:	89 2b       	or	r24, r25
     9d8:	39 f0       	breq	.+14     	; 0x9e8 <UART_Tx_Number_Bin+0x98>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     9da:	80 91 c0 00 	lds	r24, 0x00C0
     9de:	85 ff       	sbrs	r24, 5
     9e0:	fc cf       	rjmp	.-8      	; 0x9da <UART_Tx_Number_Bin+0x8a>
  UDR0 = val;                                                                                                        
     9e2:	10 93 c6 00 	sts	0x00C6, r17
     9e6:	06 c0       	rjmp	.+12     	; 0x9f4 <UART_Tx_Number_Bin+0xa4>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     9e8:	80 91 c0 00 	lds	r24, 0x00C0
     9ec:	85 ff       	sbrs	r24, 5
     9ee:	fc cf       	rjmp	.-8      	; 0x9e8 <UART_Tx_Number_Bin+0x98>
  UDR0 = val;                                                                                                        
     9f0:	00 93 c6 00 	sts	0x00C6, r16
     9f4:	2f 5f       	subi	r18, 0xFF	; 255
     9f6:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter = 31;
  }
  
  UART_Tx_Byte('0');
  UART_Tx_Byte('b');
  for(int i = loop_counter; i >= 0; i--){
     9f8:	2c 17       	cp	r18, r28
     9fa:	3d 07       	cpc	r19, r29
     9fc:	e1 f6       	brne	.-72     	; 0x9b6 <UART_Tx_Number_Bin+0x66>
      UART_Tx_Byte( 49 );   
    }else{
      UART_Tx_Byte( 48 );         
    }
  }
}
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	ff 90       	pop	r15
     a08:	ef 90       	pop	r14
     a0a:	df 90       	pop	r13
     a0c:	cf 90       	pop	r12
     a0e:	08 95       	ret

00000a10 <UART_Tx_Number_NL>:


/************Number with End Char Functions Start**************/

void UART_Tx_Number_NL(int32_t num){
  UART_Tx_Number(num);
     a10:	0e 94 36 04 	call	0x86c	; 0x86c <UART_Tx_Number>
  UART_Tx_NL();
     a14:	0e 94 99 03 	call	0x732	; 0x732 <UART_Tx_NL>
}
     a18:	08 95       	ret

00000a1a <UART_Tx_Number_SP>:

void UART_Tx_Number_SP(int32_t num){
  UART_Tx_Number(num);
     a1a:	0e 94 36 04 	call	0x86c	; 0x86c <UART_Tx_Number>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     a1e:	80 91 c0 00 	lds	r24, 0x00C0
     a22:	85 ff       	sbrs	r24, 5
     a24:	fc cf       	rjmp	.-8      	; 0xa1e <UART_Tx_Number_SP+0x4>
  UDR0 = val;                                                                                                        
     a26:	80 e2       	ldi	r24, 0x20	; 32
     a28:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_SP(int32_t num){
  UART_Tx_Number(num);
  UART_Tx_SP();
}
     a2c:	08 95       	ret

00000a2e <UART_Tx_Number_CM>:

void UART_Tx_Number_CM(int32_t num){
  UART_Tx_Number(num);
     a2e:	0e 94 36 04 	call	0x86c	; 0x86c <UART_Tx_Number>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     a32:	80 91 c0 00 	lds	r24, 0x00C0
     a36:	85 ff       	sbrs	r24, 5
     a38:	fc cf       	rjmp	.-8      	; 0xa32 <UART_Tx_Number_CM+0x4>
  UDR0 = val;                                                                                                        
     a3a:	8c e2       	ldi	r24, 0x2C	; 44
     a3c:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_CM(int32_t num){
  UART_Tx_Number(num);
  UART_Tx_CM();
}
     a40:	08 95       	ret

00000a42 <UART_Tx_Number_Hex_NL>:


/**********Hex Number with End Char Functions Start************/

void UART_Tx_Number_Hex_NL(int32_t num){
  UART_Tx_Number_Hex(num);
     a42:	0e 94 4f 04 	call	0x89e	; 0x89e <UART_Tx_Number_Hex>
  UART_Tx_NL();
     a46:	0e 94 99 03 	call	0x732	; 0x732 <UART_Tx_NL>
}
     a4a:	08 95       	ret

00000a4c <UART_Tx_Number_Hex_SP>:

void UART_Tx_Number_Hex_SP(int32_t num){
  UART_Tx_Number_Hex(num);
     a4c:	0e 94 4f 04 	call	0x89e	; 0x89e <UART_Tx_Number_Hex>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     a50:	80 91 c0 00 	lds	r24, 0x00C0
     a54:	85 ff       	sbrs	r24, 5
     a56:	fc cf       	rjmp	.-8      	; 0xa50 <UART_Tx_Number_Hex_SP+0x4>
  UDR0 = val;                                                                                                        
     a58:	80 e2       	ldi	r24, 0x20	; 32
     a5a:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Hex_SP(int32_t num){
  UART_Tx_Number_Hex(num);
  UART_Tx_SP();
}
     a5e:	08 95       	ret

00000a60 <UART_Tx_Number_Hex_CM>:

void UART_Tx_Number_Hex_CM(int32_t num){
  UART_Tx_Number_Hex(num);
     a60:	0e 94 4f 04 	call	0x89e	; 0x89e <UART_Tx_Number_Hex>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     a64:	80 91 c0 00 	lds	r24, 0x00C0
     a68:	85 ff       	sbrs	r24, 5
     a6a:	fc cf       	rjmp	.-8      	; 0xa64 <UART_Tx_Number_Hex_CM+0x4>
  UDR0 = val;                                                                                                        
     a6c:	8c e2       	ldi	r24, 0x2C	; 44
     a6e:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Hex_CM(int32_t num){
  UART_Tx_Number_Hex(num);
  UART_Tx_CM();
}
     a72:	08 95       	ret

00000a74 <UART_Tx_Number_Bin_NL>:


/**********Bin Number with End Char Functions Start************/

void UART_Tx_Number_Bin_NL(int32_t num){
  UART_Tx_Number_Bin(num);
     a74:	0e 94 a8 04 	call	0x950	; 0x950 <UART_Tx_Number_Bin>
  UART_Tx_NL();
     a78:	0e 94 99 03 	call	0x732	; 0x732 <UART_Tx_NL>
}
     a7c:	08 95       	ret

00000a7e <UART_Tx_Number_Bin_SP>:

void UART_Tx_Number_Bin_SP(int32_t num){
  UART_Tx_Number_Bin(num);
     a7e:	0e 94 a8 04 	call	0x950	; 0x950 <UART_Tx_Number_Bin>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     a82:	80 91 c0 00 	lds	r24, 0x00C0
     a86:	85 ff       	sbrs	r24, 5
     a88:	fc cf       	rjmp	.-8      	; 0xa82 <UART_Tx_Number_Bin_SP+0x4>
  UDR0 = val;                                                                                                        
     a8a:	80 e2       	ldi	r24, 0x20	; 32
     a8c:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Bin_SP(int32_t num){
  UART_Tx_Number_Bin(num);
  UART_Tx_SP();
}
     a90:	08 95       	ret

00000a92 <UART_Tx_Number_Bin_CM>:

void UART_Tx_Number_Bin_CM(int32_t num){
  UART_Tx_Number_Bin(num);
     a92:	0e 94 a8 04 	call	0x950	; 0x950 <UART_Tx_Number_Bin>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     a96:	80 91 c0 00 	lds	r24, 0x00C0
     a9a:	85 ff       	sbrs	r24, 5
     a9c:	fc cf       	rjmp	.-8      	; 0xa96 <UART_Tx_Number_Bin_CM+0x4>
  UDR0 = val;                                                                                                        
     a9e:	8c e2       	ldi	r24, 0x2C	; 44
     aa0:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Bin_CM(int32_t num){
  UART_Tx_Number_Bin(num);
  UART_Tx_CM();
}
     aa4:	08 95       	ret

00000aa6 <UART_Tx_Parameter_NL>:



/************Number with Parameter Functions Start*************/

void UART_Tx_Parameter_NL(char *name, int32_t num){
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	7a 01       	movw	r14, r20
     ab0:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
     ab2:	0e 94 b8 03 	call	0x770	; 0x770 <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     ab6:	80 91 c0 00 	lds	r24, 0x00C0
     aba:	85 ff       	sbrs	r24, 5
     abc:	fc cf       	rjmp	.-8      	; 0xab6 <UART_Tx_Parameter_NL+0x10>
  UDR0 = val;                                                                                                        
     abe:	80 e2       	ldi	r24, 0x20	; 32
     ac0:	80 93 c6 00 	sts	0x00C6, r24
/************Number with Parameter Functions Start*************/

void UART_Tx_Parameter_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_NL(num);
     ac4:	c8 01       	movw	r24, r16
     ac6:	b7 01       	movw	r22, r14
     ac8:	0e 94 08 05 	call	0xa10	; 0xa10 <UART_Tx_Number_NL>
}
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	08 95       	ret

00000ad6 <UART_Tx_Parameter_SP>:

void UART_Tx_Parameter_SP(char *name, int32_t num){
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
     ada:	0f 93       	push	r16
     adc:	1f 93       	push	r17
     ade:	7a 01       	movw	r14, r20
     ae0:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
     ae2:	0e 94 b8 03 	call	0x770	; 0x770 <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     ae6:	80 91 c0 00 	lds	r24, 0x00C0
     aea:	85 ff       	sbrs	r24, 5
     aec:	fc cf       	rjmp	.-8      	; 0xae6 <UART_Tx_Parameter_SP+0x10>
  UDR0 = val;                                                                                                        
     aee:	80 e2       	ldi	r24, 0x20	; 32
     af0:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_SP(num);
     af4:	c8 01       	movw	r24, r16
     af6:	b7 01       	movw	r22, r14
     af8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <UART_Tx_Number_SP>
}
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	08 95       	ret

00000b06 <UART_Tx_Parameter_CM>:

void UART_Tx_Parameter_CM(char *name, int32_t num){
     b06:	ef 92       	push	r14
     b08:	ff 92       	push	r15
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	7a 01       	movw	r14, r20
     b10:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
     b12:	0e 94 b8 03 	call	0x770	; 0x770 <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     b16:	80 91 c0 00 	lds	r24, 0x00C0
     b1a:	85 ff       	sbrs	r24, 5
     b1c:	fc cf       	rjmp	.-8      	; 0xb16 <UART_Tx_Parameter_CM+0x10>
  UDR0 = val;                                                                                                        
     b1e:	80 e2       	ldi	r24, 0x20	; 32
     b20:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_CM(num);
     b24:	c8 01       	movw	r24, r16
     b26:	b7 01       	movw	r22, r14
     b28:	0e 94 17 05 	call	0xa2e	; 0xa2e <UART_Tx_Number_CM>
}
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	08 95       	ret

00000b36 <UART_Tx_Parameter_Hex_NL>:



/**********Hex Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Hex_NL(char *name, int32_t num){
     b36:	ef 92       	push	r14
     b38:	ff 92       	push	r15
     b3a:	0f 93       	push	r16
     b3c:	1f 93       	push	r17
     b3e:	7a 01       	movw	r14, r20
     b40:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
     b42:	0e 94 b8 03 	call	0x770	; 0x770 <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     b46:	80 91 c0 00 	lds	r24, 0x00C0
     b4a:	85 ff       	sbrs	r24, 5
     b4c:	fc cf       	rjmp	.-8      	; 0xb46 <UART_Tx_Parameter_Hex_NL+0x10>
  UDR0 = val;                                                                                                        
     b4e:	80 e2       	ldi	r24, 0x20	; 32
     b50:	80 93 c6 00 	sts	0x00C6, r24
/**********Hex Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Hex_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_NL(num);
     b54:	c8 01       	movw	r24, r16
     b56:	b7 01       	movw	r22, r14
     b58:	0e 94 21 05 	call	0xa42	; 0xa42 <UART_Tx_Number_Hex_NL>
}
     b5c:	1f 91       	pop	r17
     b5e:	0f 91       	pop	r16
     b60:	ff 90       	pop	r15
     b62:	ef 90       	pop	r14
     b64:	08 95       	ret

00000b66 <UART_Tx_Parameter_Hex_SP>:

void UART_Tx_Parameter_Hex_SP(char *name, int32_t num){
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	7a 01       	movw	r14, r20
     b70:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
     b72:	0e 94 b8 03 	call	0x770	; 0x770 <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     b76:	80 91 c0 00 	lds	r24, 0x00C0
     b7a:	85 ff       	sbrs	r24, 5
     b7c:	fc cf       	rjmp	.-8      	; 0xb76 <UART_Tx_Parameter_Hex_SP+0x10>
  UDR0 = val;                                                                                                        
     b7e:	80 e2       	ldi	r24, 0x20	; 32
     b80:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Hex_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_SP(num);
     b84:	c8 01       	movw	r24, r16
     b86:	b7 01       	movw	r22, r14
     b88:	0e 94 26 05 	call	0xa4c	; 0xa4c <UART_Tx_Number_Hex_SP>
}
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	08 95       	ret

00000b96 <UART_Tx_Parameter_Hex_CM>:

void UART_Tx_Parameter_Hex_CM(char *name, int32_t num){
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	7a 01       	movw	r14, r20
     ba0:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
     ba2:	0e 94 b8 03 	call	0x770	; 0x770 <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     ba6:	80 91 c0 00 	lds	r24, 0x00C0
     baa:	85 ff       	sbrs	r24, 5
     bac:	fc cf       	rjmp	.-8      	; 0xba6 <UART_Tx_Parameter_Hex_CM+0x10>
  UDR0 = val;                                                                                                        
     bae:	80 e2       	ldi	r24, 0x20	; 32
     bb0:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Hex_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_CM(num);
     bb4:	c8 01       	movw	r24, r16
     bb6:	b7 01       	movw	r22, r14
     bb8:	0e 94 30 05 	call	0xa60	; 0xa60 <UART_Tx_Number_Hex_CM>
}
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	08 95       	ret

00000bc6 <UART_Tx_Parameter_Bin_NL>:



/**********Bin Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Bin_NL(char *name, int32_t num){
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	7a 01       	movw	r14, r20
     bd0:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
     bd2:	0e 94 b8 03 	call	0x770	; 0x770 <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     bd6:	80 91 c0 00 	lds	r24, 0x00C0
     bda:	85 ff       	sbrs	r24, 5
     bdc:	fc cf       	rjmp	.-8      	; 0xbd6 <UART_Tx_Parameter_Bin_NL+0x10>
  UDR0 = val;                                                                                                        
     bde:	80 e2       	ldi	r24, 0x20	; 32
     be0:	80 93 c6 00 	sts	0x00C6, r24
/**********Bin Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Bin_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_NL(num);
     be4:	c8 01       	movw	r24, r16
     be6:	b7 01       	movw	r22, r14
     be8:	0e 94 3a 05 	call	0xa74	; 0xa74 <UART_Tx_Number_Bin_NL>
}
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	ff 90       	pop	r15
     bf2:	ef 90       	pop	r14
     bf4:	08 95       	ret

00000bf6 <UART_Tx_Parameter_Bin_SP>:

void UART_Tx_Parameter_Bin_SP(char *name, int32_t num){
     bf6:	ef 92       	push	r14
     bf8:	ff 92       	push	r15
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	7a 01       	movw	r14, r20
     c00:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
     c02:	0e 94 b8 03 	call	0x770	; 0x770 <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     c06:	80 91 c0 00 	lds	r24, 0x00C0
     c0a:	85 ff       	sbrs	r24, 5
     c0c:	fc cf       	rjmp	.-8      	; 0xc06 <UART_Tx_Parameter_Bin_SP+0x10>
  UDR0 = val;                                                                                                        
     c0e:	80 e2       	ldi	r24, 0x20	; 32
     c10:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Bin_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_SP(num);
     c14:	c8 01       	movw	r24, r16
     c16:	b7 01       	movw	r22, r14
     c18:	0e 94 3f 05 	call	0xa7e	; 0xa7e <UART_Tx_Number_Bin_SP>
}
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	08 95       	ret

00000c26 <UART_Tx_Parameter_Bin_CM>:

void UART_Tx_Parameter_Bin_CM(char *name, int32_t num){
     c26:	ef 92       	push	r14
     c28:	ff 92       	push	r15
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	7a 01       	movw	r14, r20
     c30:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
     c32:	0e 94 b8 03 	call	0x770	; 0x770 <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     c36:	80 91 c0 00 	lds	r24, 0x00C0
     c3a:	85 ff       	sbrs	r24, 5
     c3c:	fc cf       	rjmp	.-8      	; 0xc36 <UART_Tx_Parameter_Bin_CM+0x10>
  UDR0 = val;                                                                                                        
     c3e:	80 e2       	ldi	r24, 0x20	; 32
     c40:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Bin_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_CM(num);
     c44:	c8 01       	movw	r24, r16
     c46:	b7 01       	movw	r22, r14
     c48:	0e 94 49 05 	call	0xa92	; 0xa92 <UART_Tx_Number_Bin_CM>
}
     c4c:	1f 91       	pop	r17
     c4e:	0f 91       	pop	r16
     c50:	ff 90       	pop	r15
     c52:	ef 90       	pop	r14
     c54:	08 95       	ret

00000c56 <UART_Buf_Flush>:



/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
     c5a:	fc 01       	movw	r30, r24
     c5c:	e2 57       	subi	r30, 0x72	; 114
     c5e:	fe 4f       	sbci	r31, 0xFE	; 254
     c60:	13 86       	std	Z+11, r1	; 0x0b
     c62:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
     c64:	80 34       	cpi	r24, 0x40	; 64
     c66:	91 05       	cpc	r25, r1
     c68:	c1 f7       	brne	.-16     	; 0xc5a <UART_Buf_Flush+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
     c6a:	10 92 dc 01 	sts	0x01DC, r1
     c6e:	10 92 db 01 	sts	0x01DB, r1
}
     c72:	08 95       	ret

00000c74 <UART_Buf_Get>:

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
     c74:	fc 01       	movw	r30, r24
     c76:	e2 57       	subi	r30, 0x72	; 114
     c78:	fe 4f       	sbci	r31, 0xFE	; 254
     c7a:	83 85       	ldd	r24, Z+11	; 0x0b
}
     c7c:	08 95       	ret

00000c7e <UART_Buf_Get_Index>:

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
     c7e:	80 91 db 01 	lds	r24, 0x01DB
     c82:	90 91 dc 01 	lds	r25, 0x01DC
}
     c86:	08 95       	ret

00000c88 <UART_Data_Available>:


/*******************UART Data Functions Start****************/

uint8_t UART_Data_Available(void){
  return UART.RxPacket.DataAvailable;
     c88:	80 91 e4 01 	lds	r24, 0x01E4
}
     c8c:	08 95       	ret

00000c8e <UART_Data_Len_Get>:
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
     c8e:	80 91 db 01 	lds	r24, 0x01DB
     c92:	90 91 dc 01 	lds	r25, 0x01DC
  return UART.RxPacket.DataAvailable;
}

uint8_t UART_Data_Len_Get(void){
  return UART_Buf_Get_Index();
}
     c96:	08 95       	ret

00000c98 <UART_Data_Calculated_CRC_Get>:

uint16_t UART_Data_Calculated_CRC_Get(void){
  return UART.RxPacket.CalculatedCRC;
     c98:	20 91 df 01 	lds	r18, 0x01DF
     c9c:	30 91 e0 01 	lds	r19, 0x01E0
}
     ca0:	c9 01       	movw	r24, r18
     ca2:	08 95       	ret

00000ca4 <UART_Data_Received_CRC_Get>:

uint16_t UART_Data_Received_CRC_Get(void){
  return UART.RxPacket.ReceivedCRC;
     ca4:	20 91 e1 01 	lds	r18, 0x01E1
     ca8:	30 91 e2 01 	lds	r19, 0x01E2
}
     cac:	c9 01       	movw	r24, r18
     cae:	08 95       	ret

00000cb0 <UART_Data_CRC_Status_Get>:

uint8_t UART_Data_CRC_Status_Get(void){
  return UART.RxPacket.CRCStatus;
     cb0:	80 91 e3 01 	lds	r24, 0x01E3
}
     cb4:	08 95       	ret

00000cb6 <UART_Data_Read_Complete_Status>:

uint8_t UART_Data_Read_Complete_Status(void){
  return UART.RxPacket.DataReadComplete;
     cb6:	80 91 e5 01 	lds	r24, 0x01E5
}
     cba:	08 95       	ret

00000cbc <UART_Data_Clear_Available_Flag>:

void UART_Data_Clear_Available_Flag(void){
  UART.RxPacket.DataAvailable = UART_FALSE;
     cbc:	10 92 e4 01 	sts	0x01E4, r1
}
     cc0:	08 95       	ret

00000cc2 <UART_Data_Clear_Read_Complete_Flag>:

void UART_Data_Clear_Read_Complete_Flag(void){
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
     cc6:	fc 01       	movw	r30, r24
     cc8:	e2 57       	subi	r30, 0x72	; 114
     cca:	fe 4f       	sbci	r31, 0xFE	; 254
     ccc:	13 86       	std	Z+11, r1	; 0x0b
     cce:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
     cd0:	80 34       	cpi	r24, 0x40	; 64
     cd2:	91 05       	cpc	r25, r1
     cd4:	c1 f7       	brne	.-16     	; 0xcc6 <UART_Data_Clear_Read_Complete_Flag+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
     cd6:	10 92 dc 01 	sts	0x01DC, r1
     cda:	10 92 db 01 	sts	0x01DB, r1
  UART.RxPacket.DataAvailable = UART_FALSE;
}

void UART_Data_Clear_Read_Complete_Flag(void){
  UART_Buf_Flush();
  UART.RxPacket.DataReadComplete = UART_TRUE;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	80 93 e5 01 	sts	0x01E5, r24
}
     ce4:	08 95       	ret

00000ce6 <UART_Data_Copy_Buf>:


void UART_Data_Copy_Buf(uint8_t *buf){
     ce6:	ac 01       	movw	r20, r24
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	0a c0       	rjmp	.+20     	; 0xd02 <UART_Data_Copy_Buf+0x1c>
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
     cee:	f9 01       	movw	r30, r18
     cf0:	e2 57       	subi	r30, 0x72	; 114
     cf2:	fe 4f       	sbci	r31, 0xFE	; 254
     cf4:	83 85       	ldd	r24, Z+11	; 0x0b
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
	buf[i] = UART_Buf_Get(i);
     cf6:	fa 01       	movw	r30, r20
     cf8:	e2 0f       	add	r30, r18
     cfa:	f3 1f       	adc	r31, r19
     cfc:	80 83       	st	Z, r24
  UART.RxPacket.DataReadComplete = UART_TRUE;
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
     cfe:	2f 5f       	subi	r18, 0xFF	; 255
     d00:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
     d02:	80 91 db 01 	lds	r24, 0x01DB
     d06:	90 91 dc 01 	lds	r25, 0x01DC
  UART.RxPacket.DataReadComplete = UART_TRUE;
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	28 17       	cp	r18, r24
     d0e:	39 07       	cpc	r19, r25
     d10:	70 f3       	brcs	.-36     	; 0xcee <UART_Data_Copy_Buf+0x8>
	buf[i] = UART_Buf_Get(i);
  }
}
     d12:	08 95       	ret

00000d14 <UART_Data_Print_Buf>:


void UART_Data_Print_Buf(void){
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	0c c0       	rjmp	.+24     	; 0xd32 <UART_Data_Print_Buf+0x1e>
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
     d1a:	f9 01       	movw	r30, r18
     d1c:	e2 57       	subi	r30, 0x72	; 114
     d1e:	fe 4f       	sbci	r31, 0xFE	; 254
     d20:	93 85       	ldd	r25, Z+11	; 0x0b
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
     d22:	80 91 c0 00 	lds	r24, 0x00C0
     d26:	85 ff       	sbrs	r24, 5
     d28:	fc cf       	rjmp	.-8      	; 0xd22 <UART_Data_Print_Buf+0xe>
  UDR0 = val;                                                                                                        
     d2a:	90 93 c6 00 	sts	0x00C6, r25
  }
}


void UART_Data_Print_Buf(void){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
     d2e:	2f 5f       	subi	r18, 0xFF	; 255
     d30:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
     d32:	80 91 db 01 	lds	r24, 0x01DB
     d36:	90 91 dc 01 	lds	r25, 0x01DC
  }
}


void UART_Data_Print_Buf(void){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	28 17       	cp	r18, r24
     d3e:	39 07       	cpc	r19, r25
     d40:	60 f3       	brcs	.-40     	; 0xd1a <UART_Data_Print_Buf+0x6>
	UART_Tx_Byte( UART_Buf_Get(i) );
  }
  UART_Tx_NL();
     d42:	0e 94 99 03 	call	0x732	; 0x732 <UART_Tx_NL>
}
     d46:	08 95       	ret

00000d48 <UART_Error_Code_Get>:

\
/******************Error Code Functions Start****************/

uint8_t UART_Error_Code_Get(void){
  return UART.Error;
     d48:	80 91 8e 01 	lds	r24, 0x018E
}
     d4c:	08 95       	ret

00000d4e <UART_Error_Code_Clear>:

void UART_Error_Code_Clear(void){
  UART.Error = 0;
     d4e:	10 92 8e 01 	sts	0x018E, r1
}
     d52:	08 95       	ret

00000d54 <UART_ISR_Handler>:

/***************UART ISR Handler Functions Start************/

void UART_ISR_Handler(void){
  UART_Clear_Interrupt_Flag();
  UART.LastRxByte = (uint8_t)UART_Rx_Byte();
     d54:	0e 94 30 03 	call	0x660	; 0x660 <UART_Rx_Byte>
     d58:	80 93 98 01 	sts	0x0198, r24
  if(UART.Error == 0x00){
     d5c:	80 91 8e 01 	lds	r24, 0x018E
     d60:	88 23       	and	r24, r24
     d62:	11 f5       	brne	.+68     	; 0xda8 <UART_ISR_Handler+0x54>
    UART.Buf[UART.BufIndex] = UART.LastRxByte;
     d64:	e0 91 db 01 	lds	r30, 0x01DB
     d68:	f0 91 dc 01 	lds	r31, 0x01DC
     d6c:	80 91 98 01 	lds	r24, 0x0198
     d70:	e2 57       	subi	r30, 0x72	; 114
     d72:	fe 4f       	sbci	r31, 0xFE	; 254
     d74:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufIndex++;
     d76:	80 91 db 01 	lds	r24, 0x01DB
     d7a:	90 91 dc 01 	lds	r25, 0x01DC
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	90 93 dc 01 	sts	0x01DC, r25
     d84:	80 93 db 01 	sts	0x01DB, r24
    if(UART.BufIndex >= UART.BufSize){
     d88:	20 91 db 01 	lds	r18, 0x01DB
     d8c:	30 91 dc 01 	lds	r19, 0x01DC
     d90:	80 91 d9 01 	lds	r24, 0x01D9
     d94:	90 91 da 01 	lds	r25, 0x01DA
     d98:	28 17       	cp	r18, r24
     d9a:	39 07       	cpc	r19, r25
     d9c:	38 f0       	brcs	.+14     	; 0xdac <UART_ISR_Handler+0x58>
      UART.BufIndex = 0;
     d9e:	10 92 dc 01 	sts	0x01DC, r1
     da2:	10 92 db 01 	sts	0x01DB, r1
     da6:	02 c0       	rjmp	.+4      	; 0xdac <UART_ISR_Handler+0x58>
    }
  }
  else{
    UART.LastRxByte = UART_NULL;
     da8:	10 92 98 01 	sts	0x0198, r1
  return TCNT2;
}


void UART_Timer_Value_Reset(void){
  TCNT2 = UART.Timer.ResetVal;
     dac:	80 91 de 01 	lds	r24, 0x01DE
     db0:	80 93 b2 00 	sts	0x00B2, r24
  else{
    UART.LastRxByte = UART_NULL;
  }
  
  UART_Timer_Value_Reset();
  if(UART.Timer.Enabled == UART_FALSE){
     db4:	80 91 dd 01 	lds	r24, 0x01DD
     db8:	88 23       	and	r24, r24
     dba:	31 f4       	brne	.+12     	; 0xdc8 <UART_ISR_Handler+0x74>
    #warning UART_RX_PCKT_CMPLT_DELAY value < 20
  #endif
}

void UART_Timer_Enable(void){
  TCCR2B = 0x07;
     dbc:	87 e0       	ldi	r24, 0x07	; 7
     dbe:	80 93 b1 00 	sts	0x00B1, r24
  }
  
  UART_Timer_Value_Reset();
  if(UART.Timer.Enabled == UART_FALSE){
	UART_Timer_Enable();
	UART.Timer.Enabled = UART_TRUE;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	80 93 dd 01 	sts	0x01DD, r24
     dc8:	08 95       	ret

00000dca <__vector_18>:
  return val;
}



ISR(USART_RX_vect){
     dca:	1f 92       	push	r1
     dcc:	0f 92       	push	r0
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	0f 92       	push	r0
     dd2:	11 24       	eor	r1, r1
     dd4:	2f 93       	push	r18
     dd6:	3f 93       	push	r19
     dd8:	4f 93       	push	r20
     dda:	5f 93       	push	r21
     ddc:	6f 93       	push	r22
     dde:	7f 93       	push	r23
     de0:	8f 93       	push	r24
     de2:	9f 93       	push	r25
     de4:	af 93       	push	r26
     de6:	bf 93       	push	r27
     de8:	ef 93       	push	r30
     dea:	ff 93       	push	r31
  UART_ISR_Handler();
     dec:	0e 94 aa 06 	call	0xd54	; 0xd54 <UART_ISR_Handler>
}
     df0:	ff 91       	pop	r31
     df2:	ef 91       	pop	r30
     df4:	bf 91       	pop	r27
     df6:	af 91       	pop	r26
     df8:	9f 91       	pop	r25
     dfa:	8f 91       	pop	r24
     dfc:	7f 91       	pop	r23
     dfe:	6f 91       	pop	r22
     e00:	5f 91       	pop	r21
     e02:	4f 91       	pop	r20
     e04:	3f 91       	pop	r19
     e06:	2f 91       	pop	r18
     e08:	0f 90       	pop	r0
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	0f 90       	pop	r0
     e0e:	1f 90       	pop	r1
     e10:	18 95       	reti

00000e12 <UART_CRC_Calculate_Byte>:
#endif

#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
     e12:	36 2f       	mov	r19, r22
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	28 27       	eor	r18, r24
     e18:	39 27       	eor	r19, r25
     e1a:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
	  crc = (crc<<1)^0x1021;
     e1c:	61 e2       	ldi	r22, 0x21	; 33
     e1e:	70 e1       	ldi	r23, 0x10	; 16
     e20:	c9 01       	movw	r24, r18
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
     e26:	37 ff       	sbrs	r19, 7
     e28:	04 c0       	rjmp	.+8      	; 0xe32 <UART_CRC_Calculate_Byte+0x20>
	  crc = (crc<<1)^0x1021;
     e2a:	9c 01       	movw	r18, r24
     e2c:	26 27       	eor	r18, r22
     e2e:	37 27       	eor	r19, r23
     e30:	01 c0       	rjmp	.+2      	; 0xe34 <UART_CRC_Calculate_Byte+0x22>
	}
    else{
	  crc <<= 1;
     e32:	9c 01       	movw	r18, r24

#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
     e34:	4f 5f       	subi	r20, 0xFF	; 255
     e36:	48 30       	cpi	r20, 0x08	; 8
     e38:	99 f7       	brne	.-26     	; 0xe20 <UART_CRC_Calculate_Byte+0xe>
    else{
	  crc <<= 1;
	}
  }
  return crc;
}
     e3a:	c9 01       	movw	r24, r18
     e3c:	08 95       	ret

00000e3e <UART_CRC_Calculate_Block>:

uint16_t UART_CRC_Calculate_Block(uint8_t *buf, uint8_t len){
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	06 2f       	mov	r16, r22
     e48:	ec 01       	movw	r28, r24
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	10 e0       	ldi	r17, 0x00	; 0
     e50:	06 c0       	rjmp	.+12     	; 0xe5e <UART_CRC_Calculate_Block+0x20>
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    crc = UART_CRC_Calculate_Byte(crc,buf[i]);
     e52:	c9 01       	movw	r24, r18
     e54:	69 91       	ld	r22, Y+
     e56:	0e 94 09 07 	call	0xe12	; 0xe12 <UART_CRC_Calculate_Byte>
     e5a:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t UART_CRC_Calculate_Block(uint8_t *buf, uint8_t len){
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
     e5c:	1f 5f       	subi	r17, 0xFF	; 255
     e5e:	10 17       	cp	r17, r16
     e60:	c0 f3       	brcs	.-16     	; 0xe52 <UART_CRC_Calculate_Block+0x14>
    crc = UART_CRC_Calculate_Byte(crc,buf[i]);
  }
  return crc;
}
     e62:	c9 01       	movw	r24, r18
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	1f 91       	pop	r17
     e6a:	0f 91       	pop	r16
     e6c:	08 95       	ret

00000e6e <UART_RX_Packet_CRC_Check>:
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
     e6e:	80 91 db 01 	lds	r24, 0x01DB
     e72:	90 91 dc 01 	lds	r25, 0x01DC

/*************UART RX Packet Functions Start***************/

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  if( UART_Data_Len_Get() >= 2){
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	28 f4       	brcc	.+10     	; 0xe84 <UART_RX_Packet_CRC_Check+0x16>
     e7a:	40 e0       	ldi	r20, 0x00	; 0
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	1f c0       	rjmp	.+62     	; 0xec2 <UART_RX_Packet_CRC_Check+0x54>
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
     e84:	60 91 db 01 	lds	r22, 0x01DB
     e88:	70 91 dc 01 	lds	r23, 0x01DC
/*************UART RX Packet Functions Start***************/

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  if( UART_Data_Len_Get() >= 2){
    crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
     e8c:	62 50       	subi	r22, 0x02	; 2
     e8e:	89 e9       	ldi	r24, 0x99	; 153
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	0e 94 1f 07 	call	0xe3e	; 0xe3e <UART_CRC_Calculate_Block>
     e96:	ac 01       	movw	r20, r24
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
     e98:	e0 91 db 01 	lds	r30, 0x01DB
     e9c:	f0 91 dc 01 	lds	r31, 0x01DC

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  if( UART_Data_Len_Get() >= 2){
    crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
    crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
     ea2:	e4 57       	subi	r30, 0x74	; 116
     ea4:	fe 4f       	sbci	r31, 0xFE	; 254
     ea6:	23 85       	ldd	r18, Z+11	; 0x0b
void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  if( UART_Data_Len_Get() >= 2){
    crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
    crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
    crc_recv <<= 8;
     ea8:	92 2f       	mov	r25, r18
     eaa:	80 e0       	ldi	r24, 0x00	; 0
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
     eac:	e0 91 db 01 	lds	r30, 0x01DB
     eb0:	f0 91 dc 01 	lds	r31, 0x01DC
  uint16_t crc_calc = 0, crc_recv = 0;
  if( UART_Data_Len_Get() >= 2){
    crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
    crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
    crc_recv <<= 8;
    crc_recv  |= UART_Buf_Get(UART_Data_Len_Get() - 1);
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
     eb6:	e3 57       	subi	r30, 0x73	; 115
     eb8:	fe 4f       	sbci	r31, 0xFE	; 254
     eba:	23 85       	ldd	r18, Z+11	; 0x0b
  uint16_t crc_calc = 0, crc_recv = 0;
  if( UART_Data_Len_Get() >= 2){
    crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
    crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
    crc_recv <<= 8;
    crc_recv  |= UART_Buf_Get(UART_Data_Len_Get() - 1);
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	28 2b       	or	r18, r24
     ec0:	39 2b       	or	r19, r25
  }
  UART.RxPacket.CalculatedCRC = crc_calc;
     ec2:	50 93 e0 01 	sts	0x01E0, r21
     ec6:	40 93 df 01 	sts	0x01DF, r20
  UART.RxPacket.ReceivedCRC = crc_recv;
     eca:	30 93 e2 01 	sts	0x01E2, r19
     ece:	20 93 e1 01 	sts	0x01E1, r18
  if( UART.RxPacket.CalculatedCRC == UART.RxPacket.ReceivedCRC ){
     ed2:	20 91 df 01 	lds	r18, 0x01DF
     ed6:	30 91 e0 01 	lds	r19, 0x01E0
     eda:	80 91 e1 01 	lds	r24, 0x01E1
     ede:	90 91 e2 01 	lds	r25, 0x01E2
     ee2:	28 17       	cp	r18, r24
     ee4:	39 07       	cpc	r19, r25
     ee6:	21 f4       	brne	.+8      	; 0xef0 <UART_RX_Packet_CRC_Check+0x82>
    UART.RxPacket.CRCStatus = UART_TRUE;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	80 93 e3 01 	sts	0x01E3, r24
     eee:	08 95       	ret
  }
  else{
    UART.RxPacket.CRCStatus = UART_FALSE;
     ef0:	10 92 e3 01 	sts	0x01E3, r1
     ef4:	08 95       	ret

00000ef6 <UART_Timer_ISR_Handler>:
  
}

void UART_Timer_ISR_Handler(void){
  UART_Timer_Clear_Interrupt_Flag();
  if(UART.Timer.Enabled == UART_TRUE){
     ef6:	80 91 dd 01 	lds	r24, 0x01DD
     efa:	81 30       	cpi	r24, 0x01	; 1
     efc:	21 f4       	brne	.+8      	; 0xf06 <UART_Timer_ISR_Handler+0x10>
void UART_Timer_Enable(void){
  TCCR2B = 0x07;
}

void UART_Timer_Disable(void){ 
  TCCR2B = 0x00;
     efe:	10 92 b1 00 	sts	0x00B1, r1

void UART_Timer_ISR_Handler(void){
  UART_Timer_Clear_Interrupt_Flag();
  if(UART.Timer.Enabled == UART_TRUE){
    UART_Timer_Disable();
	UART.Timer.Enabled = UART_FALSE;
     f02:	10 92 dd 01 	sts	0x01DD, r1
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
     f06:	80 91 db 01 	lds	r24, 0x01DB
     f0a:	90 91 dc 01 	lds	r25, 0x01DC
  if(UART.Timer.Enabled == UART_TRUE){
    UART_Timer_Disable();
	UART.Timer.Enabled = UART_FALSE;
  }
  
  if(UART_Buf_Get_Index() != UART_NULL){
     f0e:	88 23       	and	r24, r24
     f10:	71 f0       	breq	.+28     	; 0xf2e <UART_Timer_ISR_Handler+0x38>
    
	if(UART.RxPacket.DataReadComplete == UART_FALSE){
     f12:	80 91 e5 01 	lds	r24, 0x01E5
     f16:	88 23       	and	r24, r24
     f18:	19 f4       	brne	.+6      	; 0xf20 <UART_Timer_ISR_Handler+0x2a>
	  UART.Error = UART_RX_ERR_READ_INCOMPLETE;
     f1a:	80 e1       	ldi	r24, 0x10	; 16
     f1c:	80 93 8e 01 	sts	0x018E, r24
	}
    UART_RX_Packet_CRC_Check();
     f20:	0e 94 37 07 	call	0xe6e	; 0xe6e <UART_RX_Packet_CRC_Check>
	else{
	  UART_Buf_Flush();
	  UART.RxPacket.DataAvailable = UART_FALSE;
	}
	#else
	UART.RxPacket.DataAvailable = UART_TRUE;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	80 93 e4 01 	sts	0x01E4, r24
	#endif
	
	UART.RxPacket.DataReadComplete = UART_FALSE;
     f2a:	10 92 e5 01 	sts	0x01E5, r1
     f2e:	08 95       	ret

00000f30 <__vector_9>:

void UART_Timer_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

ISR(TIMER2_OVF_vect){
     f30:	1f 92       	push	r1
     f32:	0f 92       	push	r0
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	0f 92       	push	r0
     f38:	11 24       	eor	r1, r1
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
  UART_Timer_ISR_Handler();
     f52:	0e 94 7b 07 	call	0xef6	; 0xef6 <UART_Timer_ISR_Handler>
}
     f56:	ff 91       	pop	r31
     f58:	ef 91       	pop	r30
     f5a:	bf 91       	pop	r27
     f5c:	af 91       	pop	r26
     f5e:	9f 91       	pop	r25
     f60:	8f 91       	pop	r24
     f62:	7f 91       	pop	r23
     f64:	6f 91       	pop	r22
     f66:	5f 91       	pop	r21
     f68:	4f 91       	pop	r20
     f6a:	3f 91       	pop	r19
     f6c:	2f 91       	pop	r18
     f6e:	0f 90       	pop	r0
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	0f 90       	pop	r0
     f74:	1f 90       	pop	r1
     f76:	18 95       	reti

00000f78 <UART_RX_Packet_Read_Complete>:
  else{
    UART.RxPacket.CRCStatus = UART_FALSE;
  }
}

void UART_RX_Packet_Read_Complete(void){
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
     f7c:	fc 01       	movw	r30, r24
     f7e:	e2 57       	subi	r30, 0x72	; 114
     f80:	fe 4f       	sbci	r31, 0xFE	; 254
     f82:	13 86       	std	Z+11, r1	; 0x0b
     f84:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
     f86:	80 34       	cpi	r24, 0x40	; 64
     f88:	91 05       	cpc	r25, r1
     f8a:	c1 f7       	brne	.-16     	; 0xf7c <UART_RX_Packet_Read_Complete+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
     f8c:	10 92 dc 01 	sts	0x01DC, r1
     f90:	10 92 db 01 	sts	0x01DB, r1
uint8_t UART_Data_Read_Complete_Status(void){
  return UART.RxPacket.DataReadComplete;
}

void UART_Data_Clear_Available_Flag(void){
  UART.RxPacket.DataAvailable = UART_FALSE;
     f94:	10 92 e4 01 	sts	0x01E4, r1
}

void UART_RX_Packet_Read_Complete(void){
  UART_Buf_Flush();
  UART_Data_Clear_Available_Flag();
  UART_Data_Clear_Read_Complete_Flag();
     f98:	0e 94 61 06 	call	0xcc2	; 0xcc2 <UART_Data_Clear_Read_Complete_Flag>
}
     f9c:	08 95       	ret

00000f9e <UART_Init>:



/*****************UART Init Functions Start****************/

void UART_Init(uint32_t baud){
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	7b 01       	movw	r14, r22
     fa8:	8c 01       	movw	r16, r24
  UART_Struct_Init();
     faa:	0e 94 bd 02 	call	0x57a	; 0x57a <UART_Struct_Init>
    UART.Buf[i] = UART_NULL;
  }
}

void UART_RX_Packet_Struct_Init(void){
  UART.RxPacket.CalculatedCRC    = UART_NULL;
     fae:	10 92 e0 01 	sts	0x01E0, r1
     fb2:	10 92 df 01 	sts	0x01DF, r1
  UART.RxPacket.ReceivedCRC      = UART_NULL;
     fb6:	10 92 e2 01 	sts	0x01E2, r1
     fba:	10 92 e1 01 	sts	0x01E1, r1
  UART.RxPacket.CRCStatus        = UART_FALSE;
     fbe:	10 92 e3 01 	sts	0x01E3, r1
  UART.RxPacket.DataAvailable    = UART_FALSE;
     fc2:	10 92 e4 01 	sts	0x01E4, r1
  UART.RxPacket.DataReadComplete = UART_TRUE;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	80 93 e5 01 	sts	0x01E5, r24


/********************UART Timer Functions Start*****************/

void UART_Timer_Struct_Init(void){
  UART.Timer.Enabled = UART_FALSE;
     fcc:	10 92 dd 01 	sts	0x01DD, r1
  UART.Timer.ResetVal = UART_NULL;
     fd0:	10 92 de 01 	sts	0x01DE, r1
  UART_RX_Packet_Struct_Init();
  UART_Timer_Struct_Init();
  
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
     fd4:	c8 01       	movw	r24, r16
     fd6:	b7 01       	movw	r22, r14
     fd8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Tx(void){
  UCSR0B |= (1<<TXEN0);
     fdc:	80 91 c1 00 	lds	r24, 0x00C1
     fe0:	88 60       	ori	r24, 0x08	; 8
     fe2:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
     fe6:	96 e0       	ldi	r25, 0x06	; 6
     fe8:	90 93 c2 00 	sts	0x00C2, r25
}


void UART_Config_Rx(void){
  UCSR0B |= (1<<RXEN0);
     fec:	80 91 c1 00 	lds	r24, 0x00C1
     ff0:	80 61       	ori	r24, 0x10	; 16
     ff2:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
     ff6:	90 93 c2 00 	sts	0x00C2, r25
}

void UART_Config_Rx_Interrupt(void){
  UCSR0B |= (1<<RXCIE0);
     ffa:	80 91 c1 00 	lds	r24, 0x00C1
     ffe:	80 68       	ori	r24, 0x80	; 128
    1000:	80 93 c1 00 	sts	0x00C1, r24
  sei();
    1004:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Rx_Interrupt();
  #endif
  
  UART_Timer_Init();
    1006:	0e 94 59 03 	call	0x6b2	; 0x6b2 <UART_Timer_Init>
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    100e:	fc 01       	movw	r30, r24
    1010:	e2 57       	subi	r30, 0x72	; 114
    1012:	fe 4f       	sbci	r31, 0xFE	; 254
    1014:	13 86       	std	Z+11, r1	; 0x0b
    1016:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    1018:	80 34       	cpi	r24, 0x40	; 64
    101a:	91 05       	cpc	r25, r1
    101c:	c1 f7       	brne	.-16     	; 0x100e <UART_Init+0x70>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    101e:	10 92 dc 01 	sts	0x01DC, r1
    1022:	10 92 db 01 	sts	0x01DB, r1
  UART_Config_Rx_Interrupt();
  #endif
  
  UART_Timer_Init();
  UART_Buf_Flush();
}
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	08 95       	ret

00001030 <DataHandler_Buf_Flush>:
}datahandler_t;

datahandler_t DataHandler;


void DataHandler_Buf_Flush(void){
    1030:	e6 ee       	ldi	r30, 0xE6	; 230
    1032:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<DATA_HANDLER_BUF_SIZE;i++){
	DataHandler.RawBuf[i] = 0;
    1034:	11 92       	st	Z+, r1

datahandler_t DataHandler;


void DataHandler_Buf_Flush(void){
  for(uint8_t i=0;i<DATA_HANDLER_BUF_SIZE;i++){
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	e0 3f       	cpi	r30, 0xF0	; 240
    103a:	f8 07       	cpc	r31, r24
    103c:	d9 f7       	brne	.-10     	; 0x1034 <DataHandler_Buf_Flush+0x4>
	DataHandler.RawBuf[i] = 0;
  }
  DataHandler.CMD = 0;
    103e:	10 82       	st	Z, r1
}
    1040:	08 95       	ret

00001042 <DataHandler_Buf_Assign>:

void DataHandler_Buf_Assign(uint8_t val, uint8_t index){
  if(index<DATA_HANDLER_BUF_SIZE){
    1042:	6a 30       	cpi	r22, 0x0A	; 10
    1044:	28 f4       	brcc	.+10     	; 0x1050 <DataHandler_Buf_Assign+0xe>
    DataHandler.RawBuf[index] = val;
    1046:	e6 2f       	mov	r30, r22
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	ea 51       	subi	r30, 0x1A	; 26
    104c:	fe 4f       	sbci	r31, 0xFE	; 254
    104e:	80 83       	st	Z, r24
    1050:	08 95       	ret

00001052 <DataHandler_Buf_Get>:
  }
}

uint8_t DataHandler_Buf_Get(uint8_t index){
  if(index<DATA_HANDLER_BUF_SIZE){
    1052:	8a 30       	cpi	r24, 0x0A	; 10
    1054:	10 f0       	brcs	.+4      	; 0x105a <DataHandler_Buf_Get+0x8>
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	08 95       	ret
    return DataHandler.RawBuf[index];
    105a:	e8 2f       	mov	r30, r24
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	ea 51       	subi	r30, 0x1A	; 26
    1060:	fe 4f       	sbci	r31, 0xFE	; 254
    1062:	80 81       	ld	r24, Z
  }
  else{
    return 0;
  }
}
    1064:	08 95       	ret

00001066 <DataHandler_Char_To_Dec>:


uint8_t DataHandler_Char_To_Dec(uint8_t val){
  uint8_t temp = 0;
  if( (val >= 48) && (val >= 57) ){
    1066:	89 33       	cpi	r24, 0x39	; 57
    1068:	10 f4       	brcc	.+4      	; 0x106e <DataHandler_Char_To_Dec+0x8>
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	08 95       	ret
    temp = (val - 48);
    106e:	80 53       	subi	r24, 0x30	; 48
  }
  return temp;
}
    1070:	08 95       	ret

00001072 <DataHandler_Init>:



void DataHandler_Init(void){
    1072:	e6 ee       	ldi	r30, 0xE6	; 230
    1074:	f1 e0       	ldi	r31, 0x01	; 1
datahandler_t DataHandler;


void DataHandler_Buf_Flush(void){
  for(uint8_t i=0;i<DATA_HANDLER_BUF_SIZE;i++){
	DataHandler.RawBuf[i] = 0;
    1076:	11 92       	st	Z+, r1

datahandler_t DataHandler;


void DataHandler_Buf_Flush(void){
  for(uint8_t i=0;i<DATA_HANDLER_BUF_SIZE;i++){
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	e0 3f       	cpi	r30, 0xF0	; 240
    107c:	f8 07       	cpc	r31, r24
    107e:	d9 f7       	brne	.-10     	; 0x1076 <DataHandler_Init+0x4>
	DataHandler.RawBuf[i] = 0;
  }
  DataHandler.CMD = 0;
    1080:	10 82       	st	Z, r1



void DataHandler_Init(void){
  DataHandler_Buf_Flush();
}
    1082:	08 95       	ret

00001084 <__udivmodsi4>:
    1084:	a1 e2       	ldi	r26, 0x21	; 33
    1086:	1a 2e       	mov	r1, r26
    1088:	aa 1b       	sub	r26, r26
    108a:	bb 1b       	sub	r27, r27
    108c:	fd 01       	movw	r30, r26
    108e:	0d c0       	rjmp	.+26     	; 0x10aa <__udivmodsi4_ep>

00001090 <__udivmodsi4_loop>:
    1090:	aa 1f       	adc	r26, r26
    1092:	bb 1f       	adc	r27, r27
    1094:	ee 1f       	adc	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	a2 17       	cp	r26, r18
    109a:	b3 07       	cpc	r27, r19
    109c:	e4 07       	cpc	r30, r20
    109e:	f5 07       	cpc	r31, r21
    10a0:	20 f0       	brcs	.+8      	; 0x10aa <__udivmodsi4_ep>
    10a2:	a2 1b       	sub	r26, r18
    10a4:	b3 0b       	sbc	r27, r19
    10a6:	e4 0b       	sbc	r30, r20
    10a8:	f5 0b       	sbc	r31, r21

000010aa <__udivmodsi4_ep>:
    10aa:	66 1f       	adc	r22, r22
    10ac:	77 1f       	adc	r23, r23
    10ae:	88 1f       	adc	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	1a 94       	dec	r1
    10b4:	69 f7       	brne	.-38     	; 0x1090 <__udivmodsi4_loop>
    10b6:	60 95       	com	r22
    10b8:	70 95       	com	r23
    10ba:	80 95       	com	r24
    10bc:	90 95       	com	r25
    10be:	9b 01       	movw	r18, r22
    10c0:	ac 01       	movw	r20, r24
    10c2:	bd 01       	movw	r22, r26
    10c4:	cf 01       	movw	r24, r30
    10c6:	08 95       	ret

000010c8 <_exit>:
    10c8:	f8 94       	cli

000010ca <__stop_program>:
    10ca:	ff cf       	rjmp	.-2      	; 0x10ca <__stop_program>
